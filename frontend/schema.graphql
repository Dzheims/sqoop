"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `CollectionTweet`.
  """
  collectionTweetsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): CollectionTweetsConnection

  """
  Reads a set of `CollectionTweet`.
  """
  collectionTweets(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): [CollectionTweet!]

  """
  Reads and enables pagination through a set of `Collection`.
  """
  collectionsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): CollectionsConnection

  """
  Reads a set of `Collection`.
  """
  collections(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): [Collection!]

  """
  Reads and enables pagination through a set of `NewsFeed`.
  """
  newsFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): NewsFeedsConnection

  """
  Reads a set of `NewsFeed`.
  """
  newsFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): [NewsFeed!]

  """
  Reads and enables pagination through a set of `TwitterFeed`.
  """
  twitterFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): TwitterFeedsConnection

  """
  Reads a set of `TwitterFeed`.
  """
  twitterFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): [TwitterFeed!]

  """
  Reads and enables pagination through a set of `TwitterLocalSource`.
  """
  twitterLocalSourcesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterLocalSourceCondition
  ): TwitterLocalSourcesConnection

  """
  Reads a set of `TwitterLocalSource`.
  """
  twitterLocalSources(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterLocalSourceCondition
  ): [TwitterLocalSource!]

  """
  Reads and enables pagination through a set of `TwitterSource`.
  """
  twitterSourcesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterSourceCondition
  ): TwitterSourcesConnection

  """
  Reads a set of `TwitterSource`.
  """
  twitterSources(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterSourceCondition
  ): [TwitterSource!]

  """
  Reads and enables pagination through a set of `User`.
  """
  usersConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """
  Reads a set of `User`.
  """
  users(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]
  collectionTweet(id: Int!): CollectionTweet
  collection(id: Int!): Collection
  newsFeed(id: Int!): NewsFeed
  twitterFeed(id: Int!): TwitterFeed
  twitterLocalSource(accountId: Int!): TwitterLocalSource
  twitterLocalSourceByAccountName(accountName: String!): TwitterLocalSource
  twitterLocalSourceByAccountUsername(
    accountUsername: String!
  ): TwitterLocalSource
  twitterSource(accountId: Int!): TwitterSource
  twitterSourceByAccountName(accountName: String!): TwitterSource
  twitterSourceByAccountUsername(accountUsername: String!): TwitterSource
  user(userId: Int!): User
  userByUsername(username: String!): User
  currentUserId: Int

  """
  Reads a single `CollectionTweet` using its globally unique `ID`.
  """
  collectionTweetByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionTweet`.
    """
    nodeId: ID!
  ): CollectionTweet

  """
  Reads a single `Collection` using its globally unique `ID`.
  """
  collectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Collection`.
    """
    nodeId: ID!
  ): Collection

  """
  Reads a single `NewsFeed` using its globally unique `ID`.
  """
  newsFeedByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `NewsFeed`.
    """
    nodeId: ID!
  ): NewsFeed

  """
  Reads a single `TwitterFeed` using its globally unique `ID`.
  """
  twitterFeedByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterFeed`.
    """
    nodeId: ID!
  ): TwitterFeed

  """
  Reads a single `TwitterLocalSource` using its globally unique `ID`.
  """
  twitterLocalSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterLocalSource`.
    """
    nodeId: ID!
  ): TwitterLocalSource

  """
  Reads a single `TwitterSource` using its globally unique `ID`.
  """
  twitterSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterSource`.
    """
    nodeId: ID!
  ): TwitterSource

  """
  Reads a single `User` using its globally unique `ID`.
  """
  userByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `User`.
    """
    nodeId: ID!
  ): User
  topHeadlines(
    country: String = "ph"
    sources: String
    category: Category
    keyword: String
  ): [Article!]!
  topHeadlinesSources(country: String = "us", category: Category): [Source!]!
  searchTweets(keyword: [String], sources: [String]): [Tweet!]!
  tweetLookup(id: String!): Tweet!
  veraFilesFactCheck(keyword: String): [VeraFiles!]!
  googleFactCheckSearch(keyword: String): [Claim!]!
  getColumnResult: [ColumnResult!]!
  collectionContents(collectionId: Int!): [CollectionContent!]!
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A connection to a list of `CollectionTweet` values.
"""
type CollectionTweetsConnection {
  """
  A list of `CollectionTweet` objects.
  """
  nodes: [CollectionTweet]!

  """
  A list of edges which contains the `CollectionTweet` and cursor to aid in pagination.
  """
  edges: [CollectionTweetsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionTweet` you could get from the connection.
  """
  totalCount: Int!
}

type CollectionTweet implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tweetId: String!
  collectionId: Int!

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection
}

type Collection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  userId: Int
  createdAt: Datetime!

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  Reads and enables pagination through a set of `CollectionTweet`.
  """
  collectionTweetsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): CollectionTweetsConnection!

  """
  Reads and enables pagination through a set of `CollectionTweet`.
  """
  collectionTweets(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): [CollectionTweet!]!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: Int!
  username: String!
  hashedPassword: String!

  """
  Reads and enables pagination through a set of `NewsFeed`.
  """
  newsFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): NewsFeedsConnection!

  """
  Reads and enables pagination through a set of `NewsFeed`.
  """
  newsFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): [NewsFeed!]!

  """
  Reads and enables pagination through a set of `TwitterFeed`.
  """
  twitterFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): TwitterFeedsConnection!

  """
  Reads and enables pagination through a set of `TwitterFeed`.
  """
  twitterFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): [TwitterFeed!]!

  """
  Reads and enables pagination through a set of `Collection`.
  """
  collectionsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): CollectionsConnection!

  """
  Reads and enables pagination through a set of `Collection`.
  """
  collections(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): [Collection!]!
}

"""
A connection to a list of `NewsFeed` values.
"""
type NewsFeedsConnection {
  """
  A list of `NewsFeed` objects.
  """
  nodes: [NewsFeed]!

  """
  A list of edges which contains the `NewsFeed` and cursor to aid in pagination.
  """
  edges: [NewsFeedsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `NewsFeed` you could get from the connection.
  """
  totalCount: Int!
}

type NewsFeed implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  category: Category
  country: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime!

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User
}

enum Category {
  BUSINESS
  ENTERTAINMENT
  GENERAL
  HEALTH
  SCIENCE
  SPORTS
  TECHNOLOGY
}

"""
A `NewsFeed` edge in the connection.
"""
type NewsFeedsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `NewsFeed` at the end of the edge.
  """
  node: NewsFeed
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
Methods to use when ordering `NewsFeed`.
"""
enum NewsFeedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `NewsFeed` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input NewsFeedCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A connection to a list of `TwitterFeed` values.
"""
type TwitterFeedsConnection {
  """
  A list of `TwitterFeed` objects.
  """
  nodes: [TwitterFeed]!

  """
  A list of edges which contains the `TwitterFeed` and cursor to aid in pagination.
  """
  edges: [TwitterFeedsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterFeed` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterFeed implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime!

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User
}

"""
A `TwitterFeed` edge in the connection.
"""
type TwitterFeedsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterFeed` at the end of the edge.
  """
  node: TwitterFeed
}

"""
Methods to use when ordering `TwitterFeed`.
"""
enum TwitterFeedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterFeed` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TwitterFeedCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A connection to a list of `Collection` values.
"""
type CollectionsConnection {
  """
  A list of `Collection` objects.
  """
  nodes: [Collection]!

  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Collection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Collection` edge in the connection.
"""
type CollectionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Collection` at the end of the edge.
  """
  node: Collection
}

"""
Methods to use when ordering `Collection`.
"""
enum CollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
Methods to use when ordering `CollectionTweet`.
"""
enum CollectionTweetsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionTweet` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionTweetCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `collectionId` field.
  """
  collectionId: Int
}

"""
A `CollectionTweet` edge in the connection.
"""
type CollectionTweetsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CollectionTweet` at the end of the edge.
  """
  node: CollectionTweet
}

"""
A connection to a list of `TwitterLocalSource` values.
"""
type TwitterLocalSourcesConnection {
  """
  A list of `TwitterLocalSource` objects.
  """
  nodes: [TwitterLocalSource]!

  """
  A list of edges which contains the `TwitterLocalSource` and cursor to aid in pagination.
  """
  edges: [TwitterLocalSourcesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterLocalSource` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterLocalSource implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  accountId: Int!
  accountName: String!
  accountUsername: String!
}

"""
A `TwitterLocalSource` edge in the connection.
"""
type TwitterLocalSourcesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterLocalSource` at the end of the edge.
  """
  node: TwitterLocalSource
}

"""
Methods to use when ordering `TwitterLocalSource`.
"""
enum TwitterLocalSourcesOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ACCOUNT_USERNAME_ASC
  ACCOUNT_USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterLocalSource` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TwitterLocalSourceCondition {
  """
  Checks for equality with the object’s `accountId` field.
  """
  accountId: Int

  """
  Checks for equality with the object’s `accountName` field.
  """
  accountName: String

  """
  Checks for equality with the object’s `accountUsername` field.
  """
  accountUsername: String
}

"""
A connection to a list of `TwitterSource` values.
"""
type TwitterSourcesConnection {
  """
  A list of `TwitterSource` objects.
  """
  nodes: [TwitterSource]!

  """
  A list of edges which contains the `TwitterSource` and cursor to aid in pagination.
  """
  edges: [TwitterSourcesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterSource` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterSource implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  accountId: Int!
  accountName: String!
  accountUsername: String!
}

"""
A `TwitterSource` edge in the connection.
"""
type TwitterSourcesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterSource` at the end of the edge.
  """
  node: TwitterSource
}

"""
Methods to use when ordering `TwitterSource`.
"""
enum TwitterSourcesOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ACCOUNT_USERNAME_ASC
  ACCOUNT_USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterSource` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TwitterSourceCondition {
  """
  Checks for equality with the object’s `accountId` field.
  """
  accountId: Int

  """
  Checks for equality with the object’s `accountName` field.
  """
  accountName: String

  """
  Checks for equality with the object’s `accountUsername` field.
  """
  accountUsername: String
}

"""
A connection to a list of `User` values.
"""
type UsersConnection {
  """
  A list of `User` objects.
  """
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `User` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `User` edge in the connection.
"""
type UsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `User` at the end of the edge.
  """
  node: User
}

"""
Methods to use when ordering `User`.
"""
enum UsersOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int

  """
  Checks for equality with the object’s `username` field.
  """
  username: String
}

type Article {
  author: String
  title: String
  description: String
  url: String
  urlToImage: String
  publishedAt: String
  content: String
  sourceId: String
  sourceName: String
  suggestedKeywords: [String]
}

type Source {
  id: String!
  name: String!
  description: String
  url: String
  category: String
  language: String
  country: String
}

type Tweet {
  id: String
  author_id: String
  created_at: String
  text: String
  name: String
  profile_image_url: String
  username: String
  verified: Boolean
  photos: [TwitterPhoto]
  suggestedKeywords: [String]
}

type TwitterPhoto {
  media_key: String
  type: String
  url: String
}

type VeraFiles {
  id: Int
  author: String
  description: String
  title: String
  date: String
  dateText: String
  category: String
  url: String
  imageStyle: String
  imageUrl: String
}

type Claim {
  text: String
  claimant: String
  claimDate: String
  claimReview: [ClaimReview!]!
}

type ClaimReview {
  publisher: Publisher
  url: String
  title: String
  reviewDate: String
  textualRating: String
  languageCode: String
}

type Publisher {
  name: String
  site: String
}

union ColumnResult = NewsFeed | TwitterFeed | Collection

union CollectionContent = CollectionTweet

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `CollectionTweet`.
  """
  createCollectionTweet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionTweetInput!
  ): CreateCollectionTweetPayload

  """
  Creates a single `Collection`.
  """
  createCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionInput!
  ): CreateCollectionPayload

  """
  Creates a single `NewsFeed`.
  """
  createNewsFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNewsFeedInput!
  ): CreateNewsFeedPayload

  """
  Creates a single `TwitterFeed`.
  """
  createTwitterFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterFeedInput!
  ): CreateTwitterFeedPayload

  """
  Creates a single `TwitterLocalSource`.
  """
  createTwitterLocalSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterLocalSourceInput!
  ): CreateTwitterLocalSourcePayload

  """
  Creates a single `TwitterSource`.
  """
  createTwitterSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterSourceInput!
  ): CreateTwitterSourcePayload

  """
  Creates a single `User`.
  """
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `CollectionTweet` using its globally unique id and a patch.
  """
  updateCollectionTweetByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionTweetByNodeIdInput!
  ): UpdateCollectionTweetPayload

  """
  Updates a single `CollectionTweet` using a unique key and a patch.
  """
  updateCollectionTweet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionTweetInput!
  ): UpdateCollectionTweetPayload

  """
  Updates a single `Collection` using its globally unique id and a patch.
  """
  updateCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByNodeIdInput!
  ): UpdateCollectionPayload

  """
  Updates a single `Collection` using a unique key and a patch.
  """
  updateCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload

  """
  Updates a single `NewsFeed` using its globally unique id and a patch.
  """
  updateNewsFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsFeedByNodeIdInput!
  ): UpdateNewsFeedPayload

  """
  Updates a single `NewsFeed` using a unique key and a patch.
  """
  updateNewsFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsFeedInput!
  ): UpdateNewsFeedPayload

  """
  Updates a single `TwitterFeed` using its globally unique id and a patch.
  """
  updateTwitterFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterFeedByNodeIdInput!
  ): UpdateTwitterFeedPayload

  """
  Updates a single `TwitterFeed` using a unique key and a patch.
  """
  updateTwitterFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterFeedInput!
  ): UpdateTwitterFeedPayload

  """
  Updates a single `TwitterLocalSource` using its globally unique id and a patch.
  """
  updateTwitterLocalSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceByNodeIdInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterLocalSource` using a unique key and a patch.
  """
  updateTwitterLocalSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterLocalSource` using a unique key and a patch.
  """
  updateTwitterLocalSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceByAccountNameInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterLocalSource` using a unique key and a patch.
  """
  updateTwitterLocalSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceByAccountUsernameInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterSource` using its globally unique id and a patch.
  """
  updateTwitterSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceByNodeIdInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `TwitterSource` using a unique key and a patch.
  """
  updateTwitterSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `TwitterSource` using a unique key and a patch.
  """
  updateTwitterSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceByAccountNameInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `TwitterSource` using a unique key and a patch.
  """
  updateTwitterSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceByAccountUsernameInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `User` using its globally unique id and a patch.
  """
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """
  Deletes a single `CollectionTweet` using its globally unique id.
  """
  deleteCollectionTweetByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionTweetByNodeIdInput!
  ): DeleteCollectionTweetPayload

  """
  Deletes a single `CollectionTweet` using a unique key.
  """
  deleteCollectionTweet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionTweetInput!
  ): DeleteCollectionTweetPayload

  """
  Deletes a single `Collection` using its globally unique id.
  """
  deleteCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByNodeIdInput!
  ): DeleteCollectionPayload

  """
  Deletes a single `Collection` using a unique key.
  """
  deleteCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionInput!
  ): DeleteCollectionPayload

  """
  Deletes a single `NewsFeed` using its globally unique id.
  """
  deleteNewsFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsFeedByNodeIdInput!
  ): DeleteNewsFeedPayload

  """
  Deletes a single `NewsFeed` using a unique key.
  """
  deleteNewsFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsFeedInput!
  ): DeleteNewsFeedPayload

  """
  Deletes a single `TwitterFeed` using its globally unique id.
  """
  deleteTwitterFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterFeedByNodeIdInput!
  ): DeleteTwitterFeedPayload

  """
  Deletes a single `TwitterFeed` using a unique key.
  """
  deleteTwitterFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterFeedInput!
  ): DeleteTwitterFeedPayload

  """
  Deletes a single `TwitterLocalSource` using its globally unique id.
  """
  deleteTwitterLocalSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceByNodeIdInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterLocalSource` using a unique key.
  """
  deleteTwitterLocalSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterLocalSource` using a unique key.
  """
  deleteTwitterLocalSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceByAccountNameInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterLocalSource` using a unique key.
  """
  deleteTwitterLocalSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceByAccountUsernameInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterSource` using its globally unique id.
  """
  deleteTwitterSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceByNodeIdInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `TwitterSource` using a unique key.
  """
  deleteTwitterSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `TwitterSource` using a unique key.
  """
  deleteTwitterSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceByAccountNameInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `TwitterSource` using a unique key.
  """
  deleteTwitterSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceByAccountUsernameInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `User` using its globally unique id.
  """
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload
  signin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SigninInput!
  ): SigninPayload
  signup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SignupInput!
  ): SignupPayload
}

"""
The output of our create `CollectionTweet` mutation.
"""
type CreateCollectionTweetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweet` that was created by this mutation.
  """
  collectionTweet: CollectionTweet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection

  """
  An edge for our `CollectionTweet`. May be used by Relay 1.
  """
  collectionTweetEdge(
    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetsEdge
}

"""
All input for the create `CollectionTweet` mutation.
"""
input CreateCollectionTweetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CollectionTweet` to be created by this mutation.
  """
  collectionTweet: CollectionTweetInput!
}

"""
An input for mutations affecting `CollectionTweet`
"""
input CollectionTweetInput {
  id: Int
  tweetId: String!
  collectionId: Int!
}

"""
The output of our create `Collection` mutation.
"""
type CreateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Collection` that was created by this mutation.
  """
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  An edge for our `Collection`. May be used by Relay 1.
  """
  collectionEdge(
    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the create `Collection` mutation.
"""
input CreateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Collection` to be created by this mutation.
  """
  collection: CollectionInput!
}

"""
An input for mutations affecting `Collection`
"""
input CollectionInput {
  id: Int
  title: String!
  userId: Int
  createdAt: Datetime
}

"""
The output of our create `NewsFeed` mutation.
"""
type CreateNewsFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `NewsFeed` that was created by this mutation.
  """
  newsFeed: NewsFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User

  """
  An edge for our `NewsFeed`. May be used by Relay 1.
  """
  newsFeedEdge(
    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsFeedsEdge
}

"""
All input for the create `NewsFeed` mutation.
"""
input CreateNewsFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `NewsFeed` to be created by this mutation.
  """
  newsFeed: NewsFeedInput!
}

"""
An input for mutations affecting `NewsFeed`
"""
input NewsFeedInput {
  id: Int
  title: String!
  category: Category
  country: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
}

"""
The output of our create `TwitterFeed` mutation.
"""
type CreateTwitterFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterFeed` that was created by this mutation.
  """
  twitterFeed: TwitterFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User

  """
  An edge for our `TwitterFeed`. May be used by Relay 1.
  """
  twitterFeedEdge(
    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterFeedsEdge
}

"""
All input for the create `TwitterFeed` mutation.
"""
input CreateTwitterFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterFeed` to be created by this mutation.
  """
  twitterFeed: TwitterFeedInput!
}

"""
An input for mutations affecting `TwitterFeed`
"""
input TwitterFeedInput {
  id: Int
  title: String!
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
}

"""
The output of our create `TwitterLocalSource` mutation.
"""
type CreateTwitterLocalSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` that was created by this mutation.
  """
  twitterLocalSource: TwitterLocalSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterLocalSource`. May be used by Relay 1.
  """
  twitterLocalSourceEdge(
    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterLocalSourcesEdge
}

"""
All input for the create `TwitterLocalSource` mutation.
"""
input CreateTwitterLocalSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` to be created by this mutation.
  """
  twitterLocalSource: TwitterLocalSourceInput!
}

"""
An input for mutations affecting `TwitterLocalSource`
"""
input TwitterLocalSourceInput {
  accountId: Int
  accountName: String!
  accountUsername: String!
}

"""
The output of our create `TwitterSource` mutation.
"""
type CreateTwitterSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterSource` that was created by this mutation.
  """
  twitterSource: TwitterSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterSource`. May be used by Relay 1.
  """
  twitterSourceEdge(
    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterSourcesEdge
}

"""
All input for the create `TwitterSource` mutation.
"""
input CreateTwitterSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterSource` to be created by this mutation.
  """
  twitterSource: TwitterSourceInput!
}

"""
An input for mutations affecting `TwitterSource`
"""
input TwitterSourceInput {
  accountId: Int
  accountName: String!
  accountUsername: String!
}

"""
The output of our create `User` mutation.
"""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was created by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the create `User` mutation.
"""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `User` to be created by this mutation.
  """
  user: UserInput!
}

"""
An input for mutations affecting `User`
"""
input UserInput {
  userId: Int
  username: String!
  hashedPassword: String!
}

"""
The output of our update `CollectionTweet` mutation.
"""
type UpdateCollectionTweetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweet` that was updated by this mutation.
  """
  collectionTweet: CollectionTweet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection

  """
  An edge for our `CollectionTweet`. May be used by Relay 1.
  """
  collectionTweetEdge(
    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetsEdge
}

"""
All input for the `updateCollectionTweetByNodeId` mutation.
"""
input UpdateCollectionTweetByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionTweet` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionTweet` being updated.
  """
  patch: CollectionTweetPatch!
}

"""
Represents an update to a `CollectionTweet`. Fields that are set will be updated.
"""
input CollectionTweetPatch {
  id: Int
  tweetId: String
  collectionId: Int
}

"""
All input for the `updateCollectionTweet` mutation.
"""
input UpdateCollectionTweetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionTweet` being updated.
  """
  patch: CollectionTweetPatch!
  id: Int!
}

"""
The output of our update `Collection` mutation.
"""
type UpdateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Collection` that was updated by this mutation.
  """
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  An edge for our `Collection`. May be used by Relay 1.
  """
  collectionEdge(
    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `updateCollectionByNodeId` mutation.
"""
input UpdateCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
}

"""
Represents an update to a `Collection`. Fields that are set will be updated.
"""
input CollectionPatch {
  id: Int
  title: String
  userId: Int
  createdAt: Datetime
}

"""
All input for the `updateCollection` mutation.
"""
input UpdateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  id: Int!
}

"""
The output of our update `NewsFeed` mutation.
"""
type UpdateNewsFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `NewsFeed` that was updated by this mutation.
  """
  newsFeed: NewsFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User

  """
  An edge for our `NewsFeed`. May be used by Relay 1.
  """
  newsFeedEdge(
    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsFeedsEdge
}

"""
All input for the `updateNewsFeedByNodeId` mutation.
"""
input UpdateNewsFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NewsFeed` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NewsFeed` being updated.
  """
  patch: NewsFeedPatch!
}

"""
Represents an update to a `NewsFeed`. Fields that are set will be updated.
"""
input NewsFeedPatch {
  id: Int
  title: String
  category: Category
  country: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
}

"""
All input for the `updateNewsFeed` mutation.
"""
input UpdateNewsFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NewsFeed` being updated.
  """
  patch: NewsFeedPatch!
  id: Int!
}

"""
The output of our update `TwitterFeed` mutation.
"""
type UpdateTwitterFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterFeed` that was updated by this mutation.
  """
  twitterFeed: TwitterFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User

  """
  An edge for our `TwitterFeed`. May be used by Relay 1.
  """
  twitterFeedEdge(
    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterFeedsEdge
}

"""
All input for the `updateTwitterFeedByNodeId` mutation.
"""
input UpdateTwitterFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterFeed` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterFeed` being updated.
  """
  patch: TwitterFeedPatch!
}

"""
Represents an update to a `TwitterFeed`. Fields that are set will be updated.
"""
input TwitterFeedPatch {
  id: Int
  title: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
}

"""
All input for the `updateTwitterFeed` mutation.
"""
input UpdateTwitterFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterFeed` being updated.
  """
  patch: TwitterFeedPatch!
  id: Int!
}

"""
The output of our update `TwitterLocalSource` mutation.
"""
type UpdateTwitterLocalSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` that was updated by this mutation.
  """
  twitterLocalSource: TwitterLocalSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterLocalSource`. May be used by Relay 1.
  """
  twitterLocalSourceEdge(
    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterLocalSourcesEdge
}

"""
All input for the `updateTwitterLocalSourceByNodeId` mutation.
"""
input UpdateTwitterLocalSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterLocalSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
}

"""
Represents an update to a `TwitterLocalSource`. Fields that are set will be updated.
"""
input TwitterLocalSourcePatch {
  accountId: Int
  accountName: String
  accountUsername: String
}

"""
All input for the `updateTwitterLocalSource` mutation.
"""
input UpdateTwitterLocalSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
  accountId: Int!
}

"""
All input for the `updateTwitterLocalSourceByAccountName` mutation.
"""
input UpdateTwitterLocalSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
  accountName: String!
}

"""
All input for the `updateTwitterLocalSourceByAccountUsername` mutation.
"""
input UpdateTwitterLocalSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
  accountUsername: String!
}

"""
The output of our update `TwitterSource` mutation.
"""
type UpdateTwitterSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterSource` that was updated by this mutation.
  """
  twitterSource: TwitterSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterSource`. May be used by Relay 1.
  """
  twitterSourceEdge(
    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterSourcesEdge
}

"""
All input for the `updateTwitterSourceByNodeId` mutation.
"""
input UpdateTwitterSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
}

"""
Represents an update to a `TwitterSource`. Fields that are set will be updated.
"""
input TwitterSourcePatch {
  accountId: Int
  accountName: String
  accountUsername: String
}

"""
All input for the `updateTwitterSource` mutation.
"""
input UpdateTwitterSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
  accountId: Int!
}

"""
All input for the `updateTwitterSourceByAccountName` mutation.
"""
input UpdateTwitterSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
  accountName: String!
}

"""
All input for the `updateTwitterSourceByAccountUsername` mutation.
"""
input UpdateTwitterSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
  accountUsername: String!
}

"""
The output of our update `User` mutation.
"""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was updated by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the `updateUserByNodeId` mutation.
"""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""
Represents an update to a `User`. Fields that are set will be updated.
"""
input UserPatch {
  userId: Int
  username: String
  hashedPassword: String
}

"""
All input for the `updateUser` mutation.
"""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  userId: Int!
}

"""
All input for the `updateUserByUsername` mutation.
"""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""
The output of our delete `CollectionTweet` mutation.
"""
type DeleteCollectionTweetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweet` that was deleted by this mutation.
  """
  collectionTweet: CollectionTweet
  deletedCollectionTweetNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection

  """
  An edge for our `CollectionTweet`. May be used by Relay 1.
  """
  collectionTweetEdge(
    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetsEdge
}

"""
All input for the `deleteCollectionTweetByNodeId` mutation.
"""
input DeleteCollectionTweetByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionTweet` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionTweet` mutation.
"""
input DeleteCollectionTweetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Collection` mutation.
"""
type DeleteCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Collection` that was deleted by this mutation.
  """
  collection: Collection
  deletedCollectionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  An edge for our `Collection`. May be used by Relay 1.
  """
  collectionEdge(
    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `deleteCollectionByNodeId` mutation.
"""
input DeleteCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollection` mutation.
"""
input DeleteCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `NewsFeed` mutation.
"""
type DeleteNewsFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `NewsFeed` that was deleted by this mutation.
  """
  newsFeed: NewsFeed
  deletedNewsFeedNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User

  """
  An edge for our `NewsFeed`. May be used by Relay 1.
  """
  newsFeedEdge(
    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsFeedsEdge
}

"""
All input for the `deleteNewsFeedByNodeId` mutation.
"""
input DeleteNewsFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NewsFeed` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteNewsFeed` mutation.
"""
input DeleteNewsFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `TwitterFeed` mutation.
"""
type DeleteTwitterFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterFeed` that was deleted by this mutation.
  """
  twitterFeed: TwitterFeed
  deletedTwitterFeedNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User

  """
  An edge for our `TwitterFeed`. May be used by Relay 1.
  """
  twitterFeedEdge(
    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterFeedsEdge
}

"""
All input for the `deleteTwitterFeedByNodeId` mutation.
"""
input DeleteTwitterFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterFeed` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterFeed` mutation.
"""
input DeleteTwitterFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `TwitterLocalSource` mutation.
"""
type DeleteTwitterLocalSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` that was deleted by this mutation.
  """
  twitterLocalSource: TwitterLocalSource
  deletedTwitterLocalSourceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterLocalSource`. May be used by Relay 1.
  """
  twitterLocalSourceEdge(
    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterLocalSourcesEdge
}

"""
All input for the `deleteTwitterLocalSourceByNodeId` mutation.
"""
input DeleteTwitterLocalSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterLocalSource` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterLocalSource` mutation.
"""
input DeleteTwitterLocalSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: Int!
}

"""
All input for the `deleteTwitterLocalSourceByAccountName` mutation.
"""
input DeleteTwitterLocalSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountName: String!
}

"""
All input for the `deleteTwitterLocalSourceByAccountUsername` mutation.
"""
input DeleteTwitterLocalSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountUsername: String!
}

"""
The output of our delete `TwitterSource` mutation.
"""
type DeleteTwitterSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterSource` that was deleted by this mutation.
  """
  twitterSource: TwitterSource
  deletedTwitterSourceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterSource`. May be used by Relay 1.
  """
  twitterSourceEdge(
    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterSourcesEdge
}

"""
All input for the `deleteTwitterSourceByNodeId` mutation.
"""
input DeleteTwitterSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterSource` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterSource` mutation.
"""
input DeleteTwitterSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: Int!
}

"""
All input for the `deleteTwitterSourceByAccountName` mutation.
"""
input DeleteTwitterSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountName: String!
}

"""
All input for the `deleteTwitterSourceByAccountUsername` mutation.
"""
input DeleteTwitterSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountUsername: String!
}

"""
The output of our delete `User` mutation.
"""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was deleted by this mutation.
  """
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the `deleteUserByNodeId` mutation.
"""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUser` mutation.
"""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
}

"""
All input for the `deleteUserByUsername` mutation.
"""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""
The output of our `signin` mutation.
"""
type SigninPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""
All input for the `signin` mutation.
"""
input SigninInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userName: String!
  password: String!
}

"""
The output of our `signup` mutation.
"""
type SignupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `signup` mutation.
"""
input SignupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userName: String
  password: String
}
