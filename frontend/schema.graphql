"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `CollectionArticle`.
  """
  collectionArticlesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionArticle`.
    """
    orderBy: [CollectionArticlesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionArticleCondition
  ): CollectionArticlesConnection

  """
  Reads a set of `CollectionArticle`.
  """
  collectionArticles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionArticle`.
    """
    orderBy: [CollectionArticlesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionArticleCondition
  ): [CollectionArticle!]

  """
  Reads and enables pagination through a set of `CollectionGoogleFactCheck`.
  """
  collectionGoogleFactChecksConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionGoogleFactCheck`.
    """
    orderBy: [CollectionGoogleFactChecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionGoogleFactCheckCondition
  ): CollectionGoogleFactChecksConnection

  """
  Reads a set of `CollectionGoogleFactCheck`.
  """
  collectionGoogleFactChecks(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionGoogleFactCheck`.
    """
    orderBy: [CollectionGoogleFactChecksOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionGoogleFactCheckCondition
  ): [CollectionGoogleFactCheck!]

  """
  Reads and enables pagination through a set of `CollectionTweetPhoto`.
  """
  collectionTweetPhotosConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionTweetPhoto`.
    """
    orderBy: [CollectionTweetPhotosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetPhotoCondition
  ): CollectionTweetPhotosConnection

  """
  Reads a set of `CollectionTweetPhoto`.
  """
  collectionTweetPhotos(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionTweetPhoto`.
    """
    orderBy: [CollectionTweetPhotosOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetPhotoCondition
  ): [CollectionTweetPhoto!]

  """
  Reads and enables pagination through a set of `CollectionTweet`.
  """
  collectionTweetsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): CollectionTweetsConnection

  """
  Reads a set of `CollectionTweet`.
  """
  collectionTweets(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): [CollectionTweet!]

  """
  Reads and enables pagination through a set of `CollectionVeraFile`.
  """
  collectionVeraFilesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionVeraFile`.
    """
    orderBy: [CollectionVeraFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionVeraFileCondition
  ): CollectionVeraFilesConnection

  """
  Reads a set of `CollectionVeraFile`.
  """
  collectionVeraFiles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionVeraFile`.
    """
    orderBy: [CollectionVeraFilesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionVeraFileCondition
  ): [CollectionVeraFile!]

  """
  Reads and enables pagination through a set of `Collection`.
  """
  collectionsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): CollectionsConnection

  """
  Reads a set of `Collection`.
  """
  collections(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): [Collection!]

  """
  Reads and enables pagination through a set of `NewsFeed`.
  """
  newsFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): NewsFeedsConnection

  """
  Reads a set of `NewsFeed`.
  """
  newsFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): [NewsFeed!]

  """
  Reads and enables pagination through a set of `TopHeadlinesCache`.
  """
  topHeadlinesCachesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TopHeadlinesCache`.
    """
    orderBy: [TopHeadlinesCachesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopHeadlinesCacheCondition
  ): TopHeadlinesCachesConnection

  """
  Reads a set of `TopHeadlinesCache`.
  """
  topHeadlinesCaches(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TopHeadlinesCache`.
    """
    orderBy: [TopHeadlinesCachesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopHeadlinesCacheCondition
  ): [TopHeadlinesCache!]

  """
  Reads and enables pagination through a set of `TopHeadlinesRequest`.
  """
  topHeadlinesRequestsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TopHeadlinesRequest`.
    """
    orderBy: [TopHeadlinesRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopHeadlinesRequestCondition
  ): TopHeadlinesRequestsConnection

  """
  Reads a set of `TopHeadlinesRequest`.
  """
  topHeadlinesRequests(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TopHeadlinesRequest`.
    """
    orderBy: [TopHeadlinesRequestsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopHeadlinesRequestCondition
  ): [TopHeadlinesRequest!]

  """
  Reads and enables pagination through a set of `TwitterFeed`.
  """
  twitterFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): TwitterFeedsConnection

  """
  Reads a set of `TwitterFeed`.
  """
  twitterFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): [TwitterFeed!]

  """
  Reads and enables pagination through a set of `TwitterLocalSource`.
  """
  twitterLocalSourcesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterLocalSourceCondition
  ): TwitterLocalSourcesConnection

  """
  Reads a set of `TwitterLocalSource`.
  """
  twitterLocalSources(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterLocalSourceCondition
  ): [TwitterLocalSource!]

  """
  Reads and enables pagination through a set of `TwitterRecentSearchCache`.
  """
  twitterRecentSearchCachesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterRecentSearchCache`.
    """
    orderBy: [TwitterRecentSearchCachesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCacheCondition
  ): TwitterRecentSearchCachesConnection

  """
  Reads a set of `TwitterRecentSearchCache`.
  """
  twitterRecentSearchCaches(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterRecentSearchCache`.
    """
    orderBy: [TwitterRecentSearchCachesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCacheCondition
  ): [TwitterRecentSearchCache!]

  """
  Reads and enables pagination through a set of `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCachePhotosConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterRecentSearchCachePhoto`.
    """
    orderBy: [TwitterRecentSearchCachePhotosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCachePhotoCondition
  ): TwitterRecentSearchCachePhotosConnection

  """
  Reads a set of `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCachePhotos(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterRecentSearchCachePhoto`.
    """
    orderBy: [TwitterRecentSearchCachePhotosOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCachePhotoCondition
  ): [TwitterRecentSearchCachePhoto!]

  """
  Reads and enables pagination through a set of `TwitterRecentSearchRequest`.
  """
  twitterRecentSearchRequestsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterRecentSearchRequest`.
    """
    orderBy: [TwitterRecentSearchRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchRequestCondition
  ): TwitterRecentSearchRequestsConnection

  """
  Reads a set of `TwitterRecentSearchRequest`.
  """
  twitterRecentSearchRequests(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterRecentSearchRequest`.
    """
    orderBy: [TwitterRecentSearchRequestsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchRequestCondition
  ): [TwitterRecentSearchRequest!]

  """
  Reads and enables pagination through a set of `TwitterSource`.
  """
  twitterSourcesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterSourceCondition
  ): TwitterSourcesConnection

  """
  Reads a set of `TwitterSource`.
  """
  twitterSources(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterSourceCondition
  ): [TwitterSource!]

  """
  Reads and enables pagination through a set of `User`.
  """
  usersConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """
  Reads a set of `User`.
  """
  users(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]
  collectionArticle(id: Int!): CollectionArticle
  collectionGoogleFactCheck(id: Int!): CollectionGoogleFactCheck
  collectionTweetPhoto(id: Int!): CollectionTweetPhoto
  collectionTweet(id: Int!): CollectionTweet
  collectionVeraFile(id: Int!): CollectionVeraFile
  collection(id: Int!): Collection
  collectionByTitleAndUserId(title: String!, userId: Int!): Collection
  newsFeed(id: Int!): NewsFeed
  newsFeedByTitleAndUserId(title: String!, userId: Int!): NewsFeed
  topHeadlinesCache(id: Int!): TopHeadlinesCache
  topHeadlinesRequest(id: Int!): TopHeadlinesRequest
  twitterFeed(id: Int!): TwitterFeed
  twitterFeedByTitleAndUserId(title: String!, userId: Int!): TwitterFeed
  twitterLocalSource(accountId: Int!): TwitterLocalSource
  twitterLocalSourceByAccountName(accountName: String!): TwitterLocalSource
  twitterLocalSourceByAccountUsername(
    accountUsername: String!
  ): TwitterLocalSource
  twitterRecentSearchCache(id: Int!): TwitterRecentSearchCache
  twitterRecentSearchCachePhoto(id: Int!): TwitterRecentSearchCachePhoto
  twitterRecentSearchRequest(id: Int!): TwitterRecentSearchRequest
  twitterSource(accountId: Int!): TwitterSource
  twitterSourceByAccountName(accountName: String!): TwitterSource
  twitterSourceByAccountUsername(accountUsername: String!): TwitterSource
  user(id: Int!): User
  userByUsername(username: String!): User
  currentUserId: Int

  """
  Reads a single `CollectionArticle` using its globally unique `ID`.
  """
  collectionArticleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionArticle`.
    """
    nodeId: ID!
  ): CollectionArticle

  """
  Reads a single `CollectionGoogleFactCheck` using its globally unique `ID`.
  """
  collectionGoogleFactCheckByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionGoogleFactCheck`.
    """
    nodeId: ID!
  ): CollectionGoogleFactCheck

  """
  Reads a single `CollectionTweetPhoto` using its globally unique `ID`.
  """
  collectionTweetPhotoByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionTweetPhoto`.
    """
    nodeId: ID!
  ): CollectionTweetPhoto

  """
  Reads a single `CollectionTweet` using its globally unique `ID`.
  """
  collectionTweetByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionTweet`.
    """
    nodeId: ID!
  ): CollectionTweet

  """
  Reads a single `CollectionVeraFile` using its globally unique `ID`.
  """
  collectionVeraFileByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionVeraFile`.
    """
    nodeId: ID!
  ): CollectionVeraFile

  """
  Reads a single `Collection` using its globally unique `ID`.
  """
  collectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Collection`.
    """
    nodeId: ID!
  ): Collection

  """
  Reads a single `NewsFeed` using its globally unique `ID`.
  """
  newsFeedByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `NewsFeed`.
    """
    nodeId: ID!
  ): NewsFeed

  """
  Reads a single `TopHeadlinesCache` using its globally unique `ID`.
  """
  topHeadlinesCacheByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TopHeadlinesCache`.
    """
    nodeId: ID!
  ): TopHeadlinesCache

  """
  Reads a single `TopHeadlinesRequest` using its globally unique `ID`.
  """
  topHeadlinesRequestByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TopHeadlinesRequest`.
    """
    nodeId: ID!
  ): TopHeadlinesRequest

  """
  Reads a single `TwitterFeed` using its globally unique `ID`.
  """
  twitterFeedByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterFeed`.
    """
    nodeId: ID!
  ): TwitterFeed

  """
  Reads a single `TwitterLocalSource` using its globally unique `ID`.
  """
  twitterLocalSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterLocalSource`.
    """
    nodeId: ID!
  ): TwitterLocalSource

  """
  Reads a single `TwitterRecentSearchCache` using its globally unique `ID`.
  """
  twitterRecentSearchCacheByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterRecentSearchCache`.
    """
    nodeId: ID!
  ): TwitterRecentSearchCache

  """
  Reads a single `TwitterRecentSearchCachePhoto` using its globally unique `ID`.
  """
  twitterRecentSearchCachePhotoByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterRecentSearchCachePhoto`.
    """
    nodeId: ID!
  ): TwitterRecentSearchCachePhoto

  """
  Reads a single `TwitterRecentSearchRequest` using its globally unique `ID`.
  """
  twitterRecentSearchRequestByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterRecentSearchRequest`.
    """
    nodeId: ID!
  ): TwitterRecentSearchRequest

  """
  Reads a single `TwitterSource` using its globally unique `ID`.
  """
  twitterSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TwitterSource`.
    """
    nodeId: ID!
  ): TwitterSource

  """
  Reads a single `User` using its globally unique `ID`.
  """
  userByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `User`.
    """
    nodeId: ID!
  ): User
  topHeadlines(
    country: String = "ph"
    sources: String
    category: Category
    keyword: String
  ): [Article!]!
  topHeadlinesSources(country: String = "us", category: Category): [Source!]!
  searchArticles(
    keyword: String!
    sources: String
    from: String
    to: String
  ): [Article!]!
  searchTweets(keyword: [String], sources: [String]): [Tweet!]!
  searchAllTweets(
    keyword: [String!]!
    sources: [String]
    fromDate: String
    toDate: String
  ): [Tweet!]!
  tweetLookup(id: String!): Tweet!
  veraFilesFactCheck(keyword: String): [VeraFiles!]!
  googleFactCheckSearch(keyword: String): [Claim!]!
  getColumnResult: [ColumnResult!]!
  collectionContents(collectionId: Int!): [CollectionContent!]!
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A connection to a list of `CollectionArticle` values.
"""
type CollectionArticlesConnection {
  """
  A list of `CollectionArticle` objects.
  """
  nodes: [CollectionArticle]!

  """
  A list of edges which contains the `CollectionArticle` and cursor to aid in pagination.
  """
  edges: [CollectionArticlesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionArticle` you could get from the connection.
  """
  totalCount: Int!
}

type CollectionArticle implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String
  publishedAt: String
  sourceName: String
  title: String
  url: String
  urlToImage: String
  collectionId: Int!
  createdAt: Datetime!
  suggestedKeywords: [String]

  """
  Reads a single `Collection` that is related to this `CollectionArticle`.
  """
  collection: Collection
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Collection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  userId: Int
  createdAt: Datetime!

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  Reads and enables pagination through a set of `CollectionTweet`.
  """
  collectionTweetsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): CollectionTweetsConnection!

  """
  Reads and enables pagination through a set of `CollectionTweet`.
  """
  collectionTweets(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetCondition
  ): [CollectionTweet!]!

  """
  Reads and enables pagination through a set of `CollectionArticle`.
  """
  collectionArticlesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionArticle`.
    """
    orderBy: [CollectionArticlesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionArticleCondition
  ): CollectionArticlesConnection!

  """
  Reads and enables pagination through a set of `CollectionArticle`.
  """
  collectionArticles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionArticle`.
    """
    orderBy: [CollectionArticlesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionArticleCondition
  ): [CollectionArticle!]!

  """
  Reads and enables pagination through a set of `CollectionVeraFile`.
  """
  collectionVeraFilesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionVeraFile`.
    """
    orderBy: [CollectionVeraFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionVeraFileCondition
  ): CollectionVeraFilesConnection!

  """
  Reads and enables pagination through a set of `CollectionVeraFile`.
  """
  collectionVeraFiles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionVeraFile`.
    """
    orderBy: [CollectionVeraFilesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionVeraFileCondition
  ): [CollectionVeraFile!]!

  """
  Reads and enables pagination through a set of `CollectionGoogleFactCheck`.
  """
  collectionGoogleFactChecksConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionGoogleFactCheck`.
    """
    orderBy: [CollectionGoogleFactChecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionGoogleFactCheckCondition
  ): CollectionGoogleFactChecksConnection!

  """
  Reads and enables pagination through a set of `CollectionGoogleFactCheck`.
  """
  collectionGoogleFactChecks(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionGoogleFactCheck`.
    """
    orderBy: [CollectionGoogleFactChecksOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionGoogleFactCheckCondition
  ): [CollectionGoogleFactCheck!]!
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String!
  hashedPassword: String!

  """
  Reads and enables pagination through a set of `NewsFeed`.
  """
  newsFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): NewsFeedsConnection!

  """
  Reads and enables pagination through a set of `NewsFeed`.
  """
  newsFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NewsFeedCondition
  ): [NewsFeed!]!

  """
  Reads and enables pagination through a set of `TwitterFeed`.
  """
  twitterFeedsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): TwitterFeedsConnection!

  """
  Reads and enables pagination through a set of `TwitterFeed`.
  """
  twitterFeeds(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterFeedCondition
  ): [TwitterFeed!]!

  """
  Reads and enables pagination through a set of `Collection`.
  """
  collectionsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): CollectionsConnection!

  """
  Reads and enables pagination through a set of `Collection`.
  """
  collections(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): [Collection!]!
}

"""
A connection to a list of `NewsFeed` values.
"""
type NewsFeedsConnection {
  """
  A list of `NewsFeed` objects.
  """
  nodes: [NewsFeed]!

  """
  A list of edges which contains the `NewsFeed` and cursor to aid in pagination.
  """
  edges: [NewsFeedsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `NewsFeed` you could get from the connection.
  """
  totalCount: Int!
}

type NewsFeed implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  category: Category
  country: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime!

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User
}

enum Category {
  BUSINESS
  ENTERTAINMENT
  GENERAL
  HEALTH
  SCIENCE
  SPORTS
  TECHNOLOGY
}

"""
A `NewsFeed` edge in the connection.
"""
type NewsFeedsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `NewsFeed` at the end of the edge.
  """
  node: NewsFeed
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
Methods to use when ordering `NewsFeed`.
"""
enum NewsFeedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `NewsFeed` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input NewsFeedCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `title` field.
  """
  title: String

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A connection to a list of `TwitterFeed` values.
"""
type TwitterFeedsConnection {
  """
  A list of `TwitterFeed` objects.
  """
  nodes: [TwitterFeed]!

  """
  A list of edges which contains the `TwitterFeed` and cursor to aid in pagination.
  """
  edges: [TwitterFeedsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterFeed` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterFeed implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime!

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User
}

"""
A `TwitterFeed` edge in the connection.
"""
type TwitterFeedsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterFeed` at the end of the edge.
  """
  node: TwitterFeed
}

"""
Methods to use when ordering `TwitterFeed`.
"""
enum TwitterFeedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterFeed` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TwitterFeedCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `title` field.
  """
  title: String

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A connection to a list of `Collection` values.
"""
type CollectionsConnection {
  """
  A list of `Collection` objects.
  """
  nodes: [Collection]!

  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Collection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Collection` edge in the connection.
"""
type CollectionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Collection` at the end of the edge.
  """
  node: Collection
}

"""
Methods to use when ordering `Collection`.
"""
enum CollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `title` field.
  """
  title: String

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A connection to a list of `CollectionTweet` values.
"""
type CollectionTweetsConnection {
  """
  A list of `CollectionTweet` objects.
  """
  nodes: [CollectionTweet]!

  """
  A list of edges which contains the `CollectionTweet` and cursor to aid in pagination.
  """
  edges: [CollectionTweetsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionTweet` you could get from the connection.
  """
  totalCount: Int!
}

type CollectionTweet implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tweetId: String!
  collectionId: Int!
  createdAt: Datetime!
  authorId: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  publishedAt: String

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection

  """
  Reads and enables pagination through a set of `CollectionTweetPhoto`.
  """
  collectionTweetPhotosConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CollectionTweetPhoto`.
    """
    orderBy: [CollectionTweetPhotosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetPhotoCondition
  ): CollectionTweetPhotosConnection!

  """
  Reads and enables pagination through a set of `CollectionTweetPhoto`.
  """
  collectionTweetPhotos(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `CollectionTweetPhoto`.
    """
    orderBy: [CollectionTweetPhotosOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionTweetPhotoCondition
  ): [CollectionTweetPhoto!]!
}

"""
A connection to a list of `CollectionTweetPhoto` values.
"""
type CollectionTweetPhotosConnection {
  """
  A list of `CollectionTweetPhoto` objects.
  """
  nodes: [CollectionTweetPhoto]!

  """
  A list of edges which contains the `CollectionTweetPhoto` and cursor to aid in pagination.
  """
  edges: [CollectionTweetPhotosEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionTweetPhoto` you could get from the connection.
  """
  totalCount: Int!
}

type CollectionTweetPhoto implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  mediaKey: String
  type: String
  url: String
  collectionTweetId: Int!

  """
  Reads a single `CollectionTweet` that is related to this `CollectionTweetPhoto`.
  """
  collectionTweet: CollectionTweet
}

"""
A `CollectionTweetPhoto` edge in the connection.
"""
type CollectionTweetPhotosEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CollectionTweetPhoto` at the end of the edge.
  """
  node: CollectionTweetPhoto
}

"""
Methods to use when ordering `CollectionTweetPhoto`.
"""
enum CollectionTweetPhotosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_TWEET_ID_ASC
  COLLECTION_TWEET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionTweetPhoto` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CollectionTweetPhotoCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `collectionTweetId` field.
  """
  collectionTweetId: Int
}

"""
A `CollectionTweet` edge in the connection.
"""
type CollectionTweetsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CollectionTweet` at the end of the edge.
  """
  node: CollectionTweet
}

"""
Methods to use when ordering `CollectionTweet`.
"""
enum CollectionTweetsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionTweet` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionTweetCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `collectionId` field.
  """
  collectionId: Int
}

"""
Methods to use when ordering `CollectionArticle`.
"""
enum CollectionArticlesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionArticle` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionArticleCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `collectionId` field.
  """
  collectionId: Int
}

"""
A connection to a list of `CollectionVeraFile` values.
"""
type CollectionVeraFilesConnection {
  """
  A list of `CollectionVeraFile` objects.
  """
  nodes: [CollectionVeraFile]!

  """
  A list of edges which contains the `CollectionVeraFile` and cursor to aid in pagination.
  """
  edges: [CollectionVeraFilesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionVeraFile` you could get from the connection.
  """
  totalCount: Int!
}

type CollectionVeraFile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  author: String
  category: String
  date: String
  dateText: String
  description: String
  imageStyle: String
  imageUrl: String
  url: String
  title: String
  collectionId: Int!
  createdAt: Datetime!

  """
  Reads a single `Collection` that is related to this `CollectionVeraFile`.
  """
  collection: Collection
}

"""
A `CollectionVeraFile` edge in the connection.
"""
type CollectionVeraFilesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CollectionVeraFile` at the end of the edge.
  """
  node: CollectionVeraFile
}

"""
Methods to use when ordering `CollectionVeraFile`.
"""
enum CollectionVeraFilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionVeraFile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionVeraFileCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `collectionId` field.
  """
  collectionId: Int
}

"""
A connection to a list of `CollectionGoogleFactCheck` values.
"""
type CollectionGoogleFactChecksConnection {
  """
  A list of `CollectionGoogleFactCheck` objects.
  """
  nodes: [CollectionGoogleFactCheck]!

  """
  A list of edges which contains the `CollectionGoogleFactCheck` and cursor to aid in pagination.
  """
  edges: [CollectionGoogleFactChecksEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionGoogleFactCheck` you could get from the connection.
  """
  totalCount: Int!
}

type CollectionGoogleFactCheck implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  text: String
  claimant: String
  claimDate: String
  publisherName: String
  publisherSite: String
  url: String
  title: String
  reviewDate: String
  textualRating: String
  languageCode: String
  collectionId: Int!
  createdAt: Datetime!

  """
  Reads a single `Collection` that is related to this `CollectionGoogleFactCheck`.
  """
  collection: Collection
}

"""
A `CollectionGoogleFactCheck` edge in the connection.
"""
type CollectionGoogleFactChecksEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CollectionGoogleFactCheck` at the end of the edge.
  """
  node: CollectionGoogleFactCheck
}

"""
Methods to use when ordering `CollectionGoogleFactCheck`.
"""
enum CollectionGoogleFactChecksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionGoogleFactCheck` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input CollectionGoogleFactCheckCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `collectionId` field.
  """
  collectionId: Int
}

"""
A `CollectionArticle` edge in the connection.
"""
type CollectionArticlesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CollectionArticle` at the end of the edge.
  """
  node: CollectionArticle
}

"""
A connection to a list of `TopHeadlinesCache` values.
"""
type TopHeadlinesCachesConnection {
  """
  A list of `TopHeadlinesCache` objects.
  """
  nodes: [TopHeadlinesCache]!

  """
  A list of edges which contains the `TopHeadlinesCache` and cursor to aid in pagination.
  """
  edges: [TopHeadlinesCachesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TopHeadlinesCache` you could get from the connection.
  """
  totalCount: Int!
}

type TopHeadlinesCache implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  author: String
  content: String
  description: String
  publishedAt: String
  sourceName: String
  sourceId: String
  title: String
  url: String
  urlToImage: String
  topHeadlinesRequestId: Int!
  suggestedKeywords: [String]

  """
  Reads a single `TopHeadlinesRequest` that is related to this `TopHeadlinesCache`.
  """
  topHeadlinesRequest: TopHeadlinesRequest
}

type TopHeadlinesRequest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  category: Category
  country: String
  keyword: String
  sources: String
  createdAt: Datetime!

  """
  Reads and enables pagination through a set of `TopHeadlinesCache`.
  """
  topHeadlinesCachesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TopHeadlinesCache`.
    """
    orderBy: [TopHeadlinesCachesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopHeadlinesCacheCondition
  ): TopHeadlinesCachesConnection!

  """
  Reads and enables pagination through a set of `TopHeadlinesCache`.
  """
  topHeadlinesCaches(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TopHeadlinesCache`.
    """
    orderBy: [TopHeadlinesCachesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopHeadlinesCacheCondition
  ): [TopHeadlinesCache!]!
}

"""
Methods to use when ordering `TopHeadlinesCache`.
"""
enum TopHeadlinesCachesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TOP_HEADLINES_REQUEST_ID_ASC
  TOP_HEADLINES_REQUEST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TopHeadlinesCache` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TopHeadlinesCacheCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `topHeadlinesRequestId` field.
  """
  topHeadlinesRequestId: Int
}

"""
A `TopHeadlinesCache` edge in the connection.
"""
type TopHeadlinesCachesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TopHeadlinesCache` at the end of the edge.
  """
  node: TopHeadlinesCache
}

"""
A connection to a list of `TopHeadlinesRequest` values.
"""
type TopHeadlinesRequestsConnection {
  """
  A list of `TopHeadlinesRequest` objects.
  """
  nodes: [TopHeadlinesRequest]!

  """
  A list of edges which contains the `TopHeadlinesRequest` and cursor to aid in pagination.
  """
  edges: [TopHeadlinesRequestsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TopHeadlinesRequest` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `TopHeadlinesRequest` edge in the connection.
"""
type TopHeadlinesRequestsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TopHeadlinesRequest` at the end of the edge.
  """
  node: TopHeadlinesRequest
}

"""
Methods to use when ordering `TopHeadlinesRequest`.
"""
enum TopHeadlinesRequestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TopHeadlinesRequest` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TopHeadlinesRequestCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int
}

"""
A connection to a list of `TwitterLocalSource` values.
"""
type TwitterLocalSourcesConnection {
  """
  A list of `TwitterLocalSource` objects.
  """
  nodes: [TwitterLocalSource]!

  """
  A list of edges which contains the `TwitterLocalSource` and cursor to aid in pagination.
  """
  edges: [TwitterLocalSourcesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterLocalSource` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterLocalSource implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  accountId: Int!
  accountName: String!
  accountUsername: String!
}

"""
A `TwitterLocalSource` edge in the connection.
"""
type TwitterLocalSourcesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterLocalSource` at the end of the edge.
  """
  node: TwitterLocalSource
}

"""
Methods to use when ordering `TwitterLocalSource`.
"""
enum TwitterLocalSourcesOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ACCOUNT_USERNAME_ASC
  ACCOUNT_USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterLocalSource` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TwitterLocalSourceCondition {
  """
  Checks for equality with the object’s `accountId` field.
  """
  accountId: Int

  """
  Checks for equality with the object’s `accountName` field.
  """
  accountName: String

  """
  Checks for equality with the object’s `accountUsername` field.
  """
  accountUsername: String
}

"""
A connection to a list of `TwitterRecentSearchCache` values.
"""
type TwitterRecentSearchCachesConnection {
  """
  A list of `TwitterRecentSearchCache` objects.
  """
  nodes: [TwitterRecentSearchCache]!

  """
  A list of edges which contains the `TwitterRecentSearchCache` and cursor to aid in pagination.
  """
  edges: [TwitterRecentSearchCachesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterRecentSearchCache` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterRecentSearchCache implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  twitterRecentSearchRequestId: Int!
  suggestedKeywords: [String]

  """
  Reads a single `TwitterRecentSearchRequest` that is related to this `TwitterRecentSearchCache`.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequest

  """
  Reads and enables pagination through a set of `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCachePhotosConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterRecentSearchCachePhoto`.
    """
    orderBy: [TwitterRecentSearchCachePhotosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCachePhotoCondition
  ): TwitterRecentSearchCachePhotosConnection!

  """
  Reads and enables pagination through a set of `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCachePhotos(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterRecentSearchCachePhoto`.
    """
    orderBy: [TwitterRecentSearchCachePhotosOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCachePhotoCondition
  ): [TwitterRecentSearchCachePhoto!]!
}

type TwitterRecentSearchRequest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  keyword: String
  sources: String
  createdAt: Datetime!

  """
  Reads and enables pagination through a set of `TwitterRecentSearchCache`.
  """
  twitterRecentSearchCachesConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `TwitterRecentSearchCache`.
    """
    orderBy: [TwitterRecentSearchCachesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCacheCondition
  ): TwitterRecentSearchCachesConnection!

  """
  Reads and enables pagination through a set of `TwitterRecentSearchCache`.
  """
  twitterRecentSearchCaches(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `TwitterRecentSearchCache`.
    """
    orderBy: [TwitterRecentSearchCachesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TwitterRecentSearchCacheCondition
  ): [TwitterRecentSearchCache!]!
}

"""
Methods to use when ordering `TwitterRecentSearchCache`.
"""
enum TwitterRecentSearchCachesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TWITTER_RECENT_SEARCH_REQUEST_ID_ASC
  TWITTER_RECENT_SEARCH_REQUEST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterRecentSearchCache` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TwitterRecentSearchCacheCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `twitterRecentSearchRequestId` field.
  """
  twitterRecentSearchRequestId: Int
}

"""
A connection to a list of `TwitterRecentSearchCachePhoto` values.
"""
type TwitterRecentSearchCachePhotosConnection {
  """
  A list of `TwitterRecentSearchCachePhoto` objects.
  """
  nodes: [TwitterRecentSearchCachePhoto]!

  """
  A list of edges which contains the `TwitterRecentSearchCachePhoto` and cursor to aid in pagination.
  """
  edges: [TwitterRecentSearchCachePhotosEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterRecentSearchCachePhoto` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterRecentSearchCachePhoto implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  mediaKey: String
  type: String
  url: String
  twitterRecentSearchCacheId: Int!

  """
  Reads a single `TwitterRecentSearchCache` that is related to this `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCache: TwitterRecentSearchCache
}

"""
A `TwitterRecentSearchCachePhoto` edge in the connection.
"""
type TwitterRecentSearchCachePhotosEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterRecentSearchCachePhoto` at the end of the edge.
  """
  node: TwitterRecentSearchCachePhoto
}

"""
Methods to use when ordering `TwitterRecentSearchCachePhoto`.
"""
enum TwitterRecentSearchCachePhotosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TWITTER_RECENT_SEARCH_CACHE_ID_ASC
  TWITTER_RECENT_SEARCH_CACHE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterRecentSearchCachePhoto` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TwitterRecentSearchCachePhotoCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `twitterRecentSearchCacheId` field.
  """
  twitterRecentSearchCacheId: Int
}

"""
A `TwitterRecentSearchCache` edge in the connection.
"""
type TwitterRecentSearchCachesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterRecentSearchCache` at the end of the edge.
  """
  node: TwitterRecentSearchCache
}

"""
A connection to a list of `TwitterRecentSearchRequest` values.
"""
type TwitterRecentSearchRequestsConnection {
  """
  A list of `TwitterRecentSearchRequest` objects.
  """
  nodes: [TwitterRecentSearchRequest]!

  """
  A list of edges which contains the `TwitterRecentSearchRequest` and cursor to aid in pagination.
  """
  edges: [TwitterRecentSearchRequestsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterRecentSearchRequest` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `TwitterRecentSearchRequest` edge in the connection.
"""
type TwitterRecentSearchRequestsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterRecentSearchRequest` at the end of the edge.
  """
  node: TwitterRecentSearchRequest
}

"""
Methods to use when ordering `TwitterRecentSearchRequest`.
"""
enum TwitterRecentSearchRequestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterRecentSearchRequest` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TwitterRecentSearchRequestCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int
}

"""
A connection to a list of `TwitterSource` values.
"""
type TwitterSourcesConnection {
  """
  A list of `TwitterSource` objects.
  """
  nodes: [TwitterSource]!

  """
  A list of edges which contains the `TwitterSource` and cursor to aid in pagination.
  """
  edges: [TwitterSourcesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `TwitterSource` you could get from the connection.
  """
  totalCount: Int!
}

type TwitterSource implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  accountId: Int!
  accountName: String!
  accountUsername: String!
}

"""
A `TwitterSource` edge in the connection.
"""
type TwitterSourcesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `TwitterSource` at the end of the edge.
  """
  node: TwitterSource
}

"""
Methods to use when ordering `TwitterSource`.
"""
enum TwitterSourcesOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ACCOUNT_USERNAME_ASC
  ACCOUNT_USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TwitterSource` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TwitterSourceCondition {
  """
  Checks for equality with the object’s `accountId` field.
  """
  accountId: Int

  """
  Checks for equality with the object’s `accountName` field.
  """
  accountName: String

  """
  Checks for equality with the object’s `accountUsername` field.
  """
  accountUsername: String
}

"""
A connection to a list of `User` values.
"""
type UsersConnection {
  """
  A list of `User` objects.
  """
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `User` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `User` edge in the connection.
"""
type UsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `User` at the end of the edge.
  """
  node: User
}

"""
Methods to use when ordering `User`.
"""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `username` field.
  """
  username: String
}

type Article {
  author: String
  title: String
  description: String
  url: String
  urlToImage: String
  publishedAt: String
  content: String
  sourceId: String
  sourceName: String
  suggestedKeywords: [String]
}

type Source {
  id: String!
  name: String!
  description: String
  url: String
  category: String
  language: String
  country: String
}

type Tweet {
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  photos: [TwitterPhoto]
  suggestedKeywords: [String]
}

type TwitterPhoto {
  mediaKey: String
  type: String
  url: String
}

type VeraFiles {
  id: Int!
  author: String
  description: String
  title: String
  date: String
  dateText: String
  category: String
  url: String
  imageStyle: String
  imageUrl: String
}

type Claim {
  text: String
  claimant: String
  claimDate: String
  publisherName: String
  publisherSite: String
  url: String
  title: String
  reviewDate: String
  textualRating: String
  languageCode: String
}

union ColumnResult = NewsFeed | TwitterFeed | Collection

union CollectionContent =
    CollectionTweet
  | CollectionArticle
  | CollectionVeraFile
  | CollectionGoogleFactCheck

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `CollectionArticle`.
  """
  createCollectionArticle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionArticleInput!
  ): CreateCollectionArticlePayload

  """
  Creates a single `CollectionGoogleFactCheck`.
  """
  createCollectionGoogleFactCheck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionGoogleFactCheckInput!
  ): CreateCollectionGoogleFactCheckPayload

  """
  Creates a single `CollectionTweetPhoto`.
  """
  createCollectionTweetPhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionTweetPhotoInput!
  ): CreateCollectionTweetPhotoPayload

  """
  Creates a single `CollectionTweet`.
  """
  createCollectionTweet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionTweetInput!
  ): CreateCollectionTweetPayload

  """
  Creates a single `CollectionVeraFile`.
  """
  createCollectionVeraFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionVeraFileInput!
  ): CreateCollectionVeraFilePayload

  """
  Creates a single `Collection`.
  """
  createCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionInput!
  ): CreateCollectionPayload

  """
  Creates a single `NewsFeed`.
  """
  createNewsFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNewsFeedInput!
  ): CreateNewsFeedPayload

  """
  Creates a single `TopHeadlinesCache`.
  """
  createTopHeadlinesCache(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopHeadlinesCacheInput!
  ): CreateTopHeadlinesCachePayload

  """
  Creates a single `TopHeadlinesRequest`.
  """
  createTopHeadlinesRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopHeadlinesRequestInput!
  ): CreateTopHeadlinesRequestPayload

  """
  Creates a single `TwitterFeed`.
  """
  createTwitterFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterFeedInput!
  ): CreateTwitterFeedPayload

  """
  Creates a single `TwitterLocalSource`.
  """
  createTwitterLocalSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterLocalSourceInput!
  ): CreateTwitterLocalSourcePayload

  """
  Creates a single `TwitterRecentSearchCache`.
  """
  createTwitterRecentSearchCache(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterRecentSearchCacheInput!
  ): CreateTwitterRecentSearchCachePayload

  """
  Creates a single `TwitterRecentSearchCachePhoto`.
  """
  createTwitterRecentSearchCachePhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterRecentSearchCachePhotoInput!
  ): CreateTwitterRecentSearchCachePhotoPayload

  """
  Creates a single `TwitterRecentSearchRequest`.
  """
  createTwitterRecentSearchRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterRecentSearchRequestInput!
  ): CreateTwitterRecentSearchRequestPayload

  """
  Creates a single `TwitterSource`.
  """
  createTwitterSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTwitterSourceInput!
  ): CreateTwitterSourcePayload

  """
  Creates a single `User`.
  """
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `CollectionArticle` using its globally unique id and a patch.
  """
  updateCollectionArticleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionArticleByNodeIdInput!
  ): UpdateCollectionArticlePayload

  """
  Updates a single `CollectionArticle` using a unique key and a patch.
  """
  updateCollectionArticle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionArticleInput!
  ): UpdateCollectionArticlePayload

  """
  Updates a single `CollectionGoogleFactCheck` using its globally unique id and a patch.
  """
  updateCollectionGoogleFactCheckByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionGoogleFactCheckByNodeIdInput!
  ): UpdateCollectionGoogleFactCheckPayload

  """
  Updates a single `CollectionGoogleFactCheck` using a unique key and a patch.
  """
  updateCollectionGoogleFactCheck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionGoogleFactCheckInput!
  ): UpdateCollectionGoogleFactCheckPayload

  """
  Updates a single `CollectionTweetPhoto` using its globally unique id and a patch.
  """
  updateCollectionTweetPhotoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionTweetPhotoByNodeIdInput!
  ): UpdateCollectionTweetPhotoPayload

  """
  Updates a single `CollectionTweetPhoto` using a unique key and a patch.
  """
  updateCollectionTweetPhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionTweetPhotoInput!
  ): UpdateCollectionTweetPhotoPayload

  """
  Updates a single `CollectionTweet` using its globally unique id and a patch.
  """
  updateCollectionTweetByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionTweetByNodeIdInput!
  ): UpdateCollectionTweetPayload

  """
  Updates a single `CollectionTweet` using a unique key and a patch.
  """
  updateCollectionTweet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionTweetInput!
  ): UpdateCollectionTweetPayload

  """
  Updates a single `CollectionVeraFile` using its globally unique id and a patch.
  """
  updateCollectionVeraFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionVeraFileByNodeIdInput!
  ): UpdateCollectionVeraFilePayload

  """
  Updates a single `CollectionVeraFile` using a unique key and a patch.
  """
  updateCollectionVeraFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionVeraFileInput!
  ): UpdateCollectionVeraFilePayload

  """
  Updates a single `Collection` using its globally unique id and a patch.
  """
  updateCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByNodeIdInput!
  ): UpdateCollectionPayload

  """
  Updates a single `Collection` using a unique key and a patch.
  """
  updateCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload

  """
  Updates a single `Collection` using a unique key and a patch.
  """
  updateCollectionByTitleAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByTitleAndUserIdInput!
  ): UpdateCollectionPayload

  """
  Updates a single `NewsFeed` using its globally unique id and a patch.
  """
  updateNewsFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsFeedByNodeIdInput!
  ): UpdateNewsFeedPayload

  """
  Updates a single `NewsFeed` using a unique key and a patch.
  """
  updateNewsFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsFeedInput!
  ): UpdateNewsFeedPayload

  """
  Updates a single `NewsFeed` using a unique key and a patch.
  """
  updateNewsFeedByTitleAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNewsFeedByTitleAndUserIdInput!
  ): UpdateNewsFeedPayload

  """
  Updates a single `TopHeadlinesCache` using its globally unique id and a patch.
  """
  updateTopHeadlinesCacheByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopHeadlinesCacheByNodeIdInput!
  ): UpdateTopHeadlinesCachePayload

  """
  Updates a single `TopHeadlinesCache` using a unique key and a patch.
  """
  updateTopHeadlinesCache(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopHeadlinesCacheInput!
  ): UpdateTopHeadlinesCachePayload

  """
  Updates a single `TopHeadlinesRequest` using its globally unique id and a patch.
  """
  updateTopHeadlinesRequestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopHeadlinesRequestByNodeIdInput!
  ): UpdateTopHeadlinesRequestPayload

  """
  Updates a single `TopHeadlinesRequest` using a unique key and a patch.
  """
  updateTopHeadlinesRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopHeadlinesRequestInput!
  ): UpdateTopHeadlinesRequestPayload

  """
  Updates a single `TwitterFeed` using its globally unique id and a patch.
  """
  updateTwitterFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterFeedByNodeIdInput!
  ): UpdateTwitterFeedPayload

  """
  Updates a single `TwitterFeed` using a unique key and a patch.
  """
  updateTwitterFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterFeedInput!
  ): UpdateTwitterFeedPayload

  """
  Updates a single `TwitterFeed` using a unique key and a patch.
  """
  updateTwitterFeedByTitleAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterFeedByTitleAndUserIdInput!
  ): UpdateTwitterFeedPayload

  """
  Updates a single `TwitterLocalSource` using its globally unique id and a patch.
  """
  updateTwitterLocalSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceByNodeIdInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterLocalSource` using a unique key and a patch.
  """
  updateTwitterLocalSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterLocalSource` using a unique key and a patch.
  """
  updateTwitterLocalSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceByAccountNameInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterLocalSource` using a unique key and a patch.
  """
  updateTwitterLocalSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterLocalSourceByAccountUsernameInput!
  ): UpdateTwitterLocalSourcePayload

  """
  Updates a single `TwitterRecentSearchCache` using its globally unique id and a patch.
  """
  updateTwitterRecentSearchCacheByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterRecentSearchCacheByNodeIdInput!
  ): UpdateTwitterRecentSearchCachePayload

  """
  Updates a single `TwitterRecentSearchCache` using a unique key and a patch.
  """
  updateTwitterRecentSearchCache(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterRecentSearchCacheInput!
  ): UpdateTwitterRecentSearchCachePayload

  """
  Updates a single `TwitterRecentSearchCachePhoto` using its globally unique id and a patch.
  """
  updateTwitterRecentSearchCachePhotoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterRecentSearchCachePhotoByNodeIdInput!
  ): UpdateTwitterRecentSearchCachePhotoPayload

  """
  Updates a single `TwitterRecentSearchCachePhoto` using a unique key and a patch.
  """
  updateTwitterRecentSearchCachePhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterRecentSearchCachePhotoInput!
  ): UpdateTwitterRecentSearchCachePhotoPayload

  """
  Updates a single `TwitterRecentSearchRequest` using its globally unique id and a patch.
  """
  updateTwitterRecentSearchRequestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterRecentSearchRequestByNodeIdInput!
  ): UpdateTwitterRecentSearchRequestPayload

  """
  Updates a single `TwitterRecentSearchRequest` using a unique key and a patch.
  """
  updateTwitterRecentSearchRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterRecentSearchRequestInput!
  ): UpdateTwitterRecentSearchRequestPayload

  """
  Updates a single `TwitterSource` using its globally unique id and a patch.
  """
  updateTwitterSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceByNodeIdInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `TwitterSource` using a unique key and a patch.
  """
  updateTwitterSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `TwitterSource` using a unique key and a patch.
  """
  updateTwitterSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceByAccountNameInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `TwitterSource` using a unique key and a patch.
  """
  updateTwitterSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTwitterSourceByAccountUsernameInput!
  ): UpdateTwitterSourcePayload

  """
  Updates a single `User` using its globally unique id and a patch.
  """
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """
  Deletes a single `CollectionArticle` using its globally unique id.
  """
  deleteCollectionArticleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionArticleByNodeIdInput!
  ): DeleteCollectionArticlePayload

  """
  Deletes a single `CollectionArticle` using a unique key.
  """
  deleteCollectionArticle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionArticleInput!
  ): DeleteCollectionArticlePayload

  """
  Deletes a single `CollectionGoogleFactCheck` using its globally unique id.
  """
  deleteCollectionGoogleFactCheckByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionGoogleFactCheckByNodeIdInput!
  ): DeleteCollectionGoogleFactCheckPayload

  """
  Deletes a single `CollectionGoogleFactCheck` using a unique key.
  """
  deleteCollectionGoogleFactCheck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionGoogleFactCheckInput!
  ): DeleteCollectionGoogleFactCheckPayload

  """
  Deletes a single `CollectionTweetPhoto` using its globally unique id.
  """
  deleteCollectionTweetPhotoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionTweetPhotoByNodeIdInput!
  ): DeleteCollectionTweetPhotoPayload

  """
  Deletes a single `CollectionTweetPhoto` using a unique key.
  """
  deleteCollectionTweetPhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionTweetPhotoInput!
  ): DeleteCollectionTweetPhotoPayload

  """
  Deletes a single `CollectionTweet` using its globally unique id.
  """
  deleteCollectionTweetByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionTweetByNodeIdInput!
  ): DeleteCollectionTweetPayload

  """
  Deletes a single `CollectionTweet` using a unique key.
  """
  deleteCollectionTweet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionTweetInput!
  ): DeleteCollectionTweetPayload

  """
  Deletes a single `CollectionVeraFile` using its globally unique id.
  """
  deleteCollectionVeraFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionVeraFileByNodeIdInput!
  ): DeleteCollectionVeraFilePayload

  """
  Deletes a single `CollectionVeraFile` using a unique key.
  """
  deleteCollectionVeraFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionVeraFileInput!
  ): DeleteCollectionVeraFilePayload

  """
  Deletes a single `Collection` using its globally unique id.
  """
  deleteCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByNodeIdInput!
  ): DeleteCollectionPayload

  """
  Deletes a single `Collection` using a unique key.
  """
  deleteCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionInput!
  ): DeleteCollectionPayload

  """
  Deletes a single `Collection` using a unique key.
  """
  deleteCollectionByTitleAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByTitleAndUserIdInput!
  ): DeleteCollectionPayload

  """
  Deletes a single `NewsFeed` using its globally unique id.
  """
  deleteNewsFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsFeedByNodeIdInput!
  ): DeleteNewsFeedPayload

  """
  Deletes a single `NewsFeed` using a unique key.
  """
  deleteNewsFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsFeedInput!
  ): DeleteNewsFeedPayload

  """
  Deletes a single `NewsFeed` using a unique key.
  """
  deleteNewsFeedByTitleAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNewsFeedByTitleAndUserIdInput!
  ): DeleteNewsFeedPayload

  """
  Deletes a single `TopHeadlinesCache` using its globally unique id.
  """
  deleteTopHeadlinesCacheByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopHeadlinesCacheByNodeIdInput!
  ): DeleteTopHeadlinesCachePayload

  """
  Deletes a single `TopHeadlinesCache` using a unique key.
  """
  deleteTopHeadlinesCache(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopHeadlinesCacheInput!
  ): DeleteTopHeadlinesCachePayload

  """
  Deletes a single `TopHeadlinesRequest` using its globally unique id.
  """
  deleteTopHeadlinesRequestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopHeadlinesRequestByNodeIdInput!
  ): DeleteTopHeadlinesRequestPayload

  """
  Deletes a single `TopHeadlinesRequest` using a unique key.
  """
  deleteTopHeadlinesRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopHeadlinesRequestInput!
  ): DeleteTopHeadlinesRequestPayload

  """
  Deletes a single `TwitterFeed` using its globally unique id.
  """
  deleteTwitterFeedByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterFeedByNodeIdInput!
  ): DeleteTwitterFeedPayload

  """
  Deletes a single `TwitterFeed` using a unique key.
  """
  deleteTwitterFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterFeedInput!
  ): DeleteTwitterFeedPayload

  """
  Deletes a single `TwitterFeed` using a unique key.
  """
  deleteTwitterFeedByTitleAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterFeedByTitleAndUserIdInput!
  ): DeleteTwitterFeedPayload

  """
  Deletes a single `TwitterLocalSource` using its globally unique id.
  """
  deleteTwitterLocalSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceByNodeIdInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterLocalSource` using a unique key.
  """
  deleteTwitterLocalSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterLocalSource` using a unique key.
  """
  deleteTwitterLocalSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceByAccountNameInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterLocalSource` using a unique key.
  """
  deleteTwitterLocalSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterLocalSourceByAccountUsernameInput!
  ): DeleteTwitterLocalSourcePayload

  """
  Deletes a single `TwitterRecentSearchCache` using its globally unique id.
  """
  deleteTwitterRecentSearchCacheByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterRecentSearchCacheByNodeIdInput!
  ): DeleteTwitterRecentSearchCachePayload

  """
  Deletes a single `TwitterRecentSearchCache` using a unique key.
  """
  deleteTwitterRecentSearchCache(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterRecentSearchCacheInput!
  ): DeleteTwitterRecentSearchCachePayload

  """
  Deletes a single `TwitterRecentSearchCachePhoto` using its globally unique id.
  """
  deleteTwitterRecentSearchCachePhotoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterRecentSearchCachePhotoByNodeIdInput!
  ): DeleteTwitterRecentSearchCachePhotoPayload

  """
  Deletes a single `TwitterRecentSearchCachePhoto` using a unique key.
  """
  deleteTwitterRecentSearchCachePhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterRecentSearchCachePhotoInput!
  ): DeleteTwitterRecentSearchCachePhotoPayload

  """
  Deletes a single `TwitterRecentSearchRequest` using its globally unique id.
  """
  deleteTwitterRecentSearchRequestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterRecentSearchRequestByNodeIdInput!
  ): DeleteTwitterRecentSearchRequestPayload

  """
  Deletes a single `TwitterRecentSearchRequest` using a unique key.
  """
  deleteTwitterRecentSearchRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterRecentSearchRequestInput!
  ): DeleteTwitterRecentSearchRequestPayload

  """
  Deletes a single `TwitterSource` using its globally unique id.
  """
  deleteTwitterSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceByNodeIdInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `TwitterSource` using a unique key.
  """
  deleteTwitterSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `TwitterSource` using a unique key.
  """
  deleteTwitterSourceByAccountName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceByAccountNameInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `TwitterSource` using a unique key.
  """
  deleteTwitterSourceByAccountUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTwitterSourceByAccountUsernameInput!
  ): DeleteTwitterSourcePayload

  """
  Deletes a single `User` using its globally unique id.
  """
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload
  signin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SigninInput!
  ): SigninPayload
  signup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SignupInput!
  ): SignupPayload
}

"""
The output of our create `CollectionArticle` mutation.
"""
type CreateCollectionArticlePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionArticle` that was created by this mutation.
  """
  collectionArticle: CollectionArticle

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionArticle`.
  """
  collection: Collection

  """
  An edge for our `CollectionArticle`. May be used by Relay 1.
  """
  collectionArticleEdge(
    """
    The method to use when ordering `CollectionArticle`.
    """
    orderBy: [CollectionArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionArticlesEdge
}

"""
All input for the create `CollectionArticle` mutation.
"""
input CreateCollectionArticleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CollectionArticle` to be created by this mutation.
  """
  collectionArticle: CollectionArticleInput!
}

"""
An input for mutations affecting `CollectionArticle`
"""
input CollectionArticleInput {
  id: Int
  description: String
  publishedAt: String
  sourceName: String
  title: String
  url: String
  urlToImage: String
  collectionId: Int
  createdAt: Datetime
  suggestedKeywords: [String]
  collection: CollectionArticlesCollectionIdFkeyInput
}

"""
Input for the nested mutation of `collection` in the `CollectionArticleInput` mutation.
"""
input CollectionArticlesCollectionIdFkeyInput {
  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectById: CollectionCollectionsPkeyConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByTitleAndUserId: CollectionCollectionUniqueTitleConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByNodeId: CollectionNodeIdConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteById: CollectionCollectionsPkeyDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByTitleAndUserId: CollectionCollectionUniqueTitleDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByNodeId: CollectionNodeIdDelete

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateById: CollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyUsingCollectionsPkeyUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByTitleAndUserId: CollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyUsingCollectionUniqueTitleUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByNodeId: CollectionArticleOnCollectionArticleForCollectionArticlesCollectionIdFkeyNodeIdUpdate

  """
  A `CollectionInput` object that will be created and connected to this object.
  """
  create: CollectionArticlesCollectionIdFkeyCollectionsCreateInput
}

"""
The fields on `collection` to look up the row to connect.
"""
input CollectionCollectionsPkeyConnect {
  id: Int!
}

"""
The fields on `collection` to look up the row to connect.
"""
input CollectionCollectionUniqueTitleConnect {
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input CollectionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `collection` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `collection` to look up the row to delete.
"""
input CollectionCollectionsPkeyDelete {
  id: Int!
}

"""
The fields on `collection` to look up the row to delete.
"""
input CollectionCollectionUniqueTitleDelete {
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input CollectionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `collection` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyUsingCollectionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collection` being updated.
"""
input updateCollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyPatch {
  id: Int
  title: String
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `user` in the `CollectionInput` mutation.
"""
input CollectionsUserIdFkeyInput {
  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectById: UserUsersPkeyConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectByUsername: UserUsersUsernameKeyConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectByNodeId: UserNodeIdConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteById: UserUsersPkeyDelete

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteByUsername: UserUsersUsernameKeyDelete

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnCollectionForCollectionsUserIdFkeyUsingUsersPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByUsername: UserOnCollectionForCollectionsUserIdFkeyUsingUsersUsernameKeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: CollectionOnCollectionForCollectionsUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: CollectionsUserIdFkeyUsersCreateInput
}

"""
The fields on `user` to look up the row to connect.
"""
input UserUsersPkeyConnect {
  id: Int!
}

"""
The fields on `user` to look up the row to connect.
"""
input UserUsersUsernameKeyConnect {
  username: String!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input UserNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `user` to look up the row to delete.
"""
input UserUsersPkeyDelete {
  id: Int!
}

"""
The fields on `user` to look up the row to delete.
"""
input UserUsersUsernameKeyDelete {
  username: String!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input UserNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `user` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `user` to look up the row to update.
"""
input UserOnCollectionForCollectionsUserIdFkeyUsingUsersPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnCollectionForCollectionsUserIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnCollectionForCollectionsUserIdFkeyPatch {
  id: Int
  username: String
  hashedPassword: String
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
Input for the nested mutation of `newsFeed` in the `UserInput` mutation.
"""
input NewsFeedsUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `newsFeed` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `newsFeed` for the far side of the relationship.
  """
  connectById: [NewsFeedNewsFeedsPkeyConnect!]

  """
  The primary key(s) for `newsFeed` for the far side of the relationship.
  """
  connectByTitleAndUserId: [NewsFeedNewsFeedUniqueTitleConnect!]

  """
  The primary key(s) for `newsFeed` for the far side of the relationship.
  """
  connectByNodeId: [NewsFeedNodeIdConnect!]

  """
  The primary key(s) for `newsFeed` for the far side of the relationship.
  """
  deleteById: [NewsFeedNewsFeedsPkeyDelete!]

  """
  The primary key(s) for `newsFeed` for the far side of the relationship.
  """
  deleteByTitleAndUserId: [NewsFeedNewsFeedUniqueTitleDelete!]

  """
  The primary key(s) for `newsFeed` for the far side of the relationship.
  """
  deleteByNodeId: [NewsFeedNodeIdDelete!]

  """
  The primary key(s) and patch data for `newsFeed` for the far side of the relationship.
  """
  updateById: [NewsFeedOnNewsFeedForNewsFeedsUserIdFkeyUsingNewsFeedsPkeyUpdate!]

  """
  The primary key(s) and patch data for `newsFeed` for the far side of the relationship.
  """
  updateByTitleAndUserId: [NewsFeedOnNewsFeedForNewsFeedsUserIdFkeyUsingNewsFeedUniqueTitleUpdate!]

  """
  The primary key(s) and patch data for `newsFeed` for the far side of the relationship.
  """
  updateByNodeId: [UserOnNewsFeedForNewsFeedsUserIdFkeyNodeIdUpdate!]

  """
  A `NewsFeedInput` object that will be created and connected to this object.
  """
  create: [NewsFeedsUserIdFkeyNewsFeedsCreateInput!]
}

"""
The fields on `newsFeed` to look up the row to connect.
"""
input NewsFeedNewsFeedsPkeyConnect {
  id: Int!
}

"""
The fields on `newsFeed` to look up the row to connect.
"""
input NewsFeedNewsFeedUniqueTitleConnect {
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input NewsFeedNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `newsFeed` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `newsFeed` to look up the row to delete.
"""
input NewsFeedNewsFeedsPkeyDelete {
  id: Int!
}

"""
The fields on `newsFeed` to look up the row to delete.
"""
input NewsFeedNewsFeedUniqueTitleDelete {
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input NewsFeedNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `newsFeed` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `newsFeed` to look up the row to update.
"""
input NewsFeedOnNewsFeedForNewsFeedsUserIdFkeyUsingNewsFeedsPkeyUpdate {
  """
  An object where the defined keys will be set on the `newsFeed` being updated.
  """
  patch: updateNewsFeedOnNewsFeedForNewsFeedsUserIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `newsFeed` being updated.
"""
input updateNewsFeedOnNewsFeedForNewsFeedsUserIdFkeyPatch {
  id: Int
  title: String
  category: Category
  country: String
  keyword: String
  sources: String
  createdAt: Datetime
  user: NewsFeedsUserIdFkeyInput
}

"""
Input for the nested mutation of `user` in the `NewsFeedInput` mutation.
"""
input NewsFeedsUserIdFkeyInput {
  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectById: UserUsersPkeyConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectByUsername: UserUsersUsernameKeyConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectByNodeId: UserNodeIdConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteById: UserUsersPkeyDelete

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteByUsername: UserUsersUsernameKeyDelete

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnNewsFeedForNewsFeedsUserIdFkeyUsingUsersPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByUsername: UserOnNewsFeedForNewsFeedsUserIdFkeyUsingUsersUsernameKeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: NewsFeedOnNewsFeedForNewsFeedsUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: NewsFeedsUserIdFkeyUsersCreateInput
}

"""
The fields on `user` to look up the row to update.
"""
input UserOnNewsFeedForNewsFeedsUserIdFkeyUsingUsersPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnNewsFeedForNewsFeedsUserIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnNewsFeedForNewsFeedsUserIdFkeyPatch {
  id: Int
  username: String
  hashedPassword: String
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
Input for the nested mutation of `twitterFeed` in the `UserInput` mutation.
"""
input TwitterFeedsUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `twitterFeed` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `twitterFeed` for the far side of the relationship.
  """
  connectById: [TwitterFeedTwitterFeedsPkeyConnect!]

  """
  The primary key(s) for `twitterFeed` for the far side of the relationship.
  """
  connectByTitleAndUserId: [TwitterFeedTwitterFeedUniqueTitleConnect!]

  """
  The primary key(s) for `twitterFeed` for the far side of the relationship.
  """
  connectByNodeId: [TwitterFeedNodeIdConnect!]

  """
  The primary key(s) for `twitterFeed` for the far side of the relationship.
  """
  deleteById: [TwitterFeedTwitterFeedsPkeyDelete!]

  """
  The primary key(s) for `twitterFeed` for the far side of the relationship.
  """
  deleteByTitleAndUserId: [TwitterFeedTwitterFeedUniqueTitleDelete!]

  """
  The primary key(s) for `twitterFeed` for the far side of the relationship.
  """
  deleteByNodeId: [TwitterFeedNodeIdDelete!]

  """
  The primary key(s) and patch data for `twitterFeed` for the far side of the relationship.
  """
  updateById: [TwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyUsingTwitterFeedsPkeyUpdate!]

  """
  The primary key(s) and patch data for `twitterFeed` for the far side of the relationship.
  """
  updateByTitleAndUserId: [TwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyUsingTwitterFeedUniqueTitleUpdate!]

  """
  The primary key(s) and patch data for `twitterFeed` for the far side of the relationship.
  """
  updateByNodeId: [UserOnTwitterFeedForTwitterFeedsUserIdFkeyNodeIdUpdate!]

  """
  A `TwitterFeedInput` object that will be created and connected to this object.
  """
  create: [TwitterFeedsUserIdFkeyTwitterFeedsCreateInput!]
}

"""
The fields on `twitterFeed` to look up the row to connect.
"""
input TwitterFeedTwitterFeedsPkeyConnect {
  id: Int!
}

"""
The fields on `twitterFeed` to look up the row to connect.
"""
input TwitterFeedTwitterFeedUniqueTitleConnect {
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input TwitterFeedNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `twitterFeed` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `twitterFeed` to look up the row to delete.
"""
input TwitterFeedTwitterFeedsPkeyDelete {
  id: Int!
}

"""
The fields on `twitterFeed` to look up the row to delete.
"""
input TwitterFeedTwitterFeedUniqueTitleDelete {
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input TwitterFeedNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `twitterFeed` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `twitterFeed` to look up the row to update.
"""
input TwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyUsingTwitterFeedsPkeyUpdate {
  """
  An object where the defined keys will be set on the `twitterFeed` being updated.
  """
  patch: updateTwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `twitterFeed` being updated.
"""
input updateTwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyPatch {
  id: Int
  title: String
  keyword: String
  sources: String
  createdAt: Datetime
  user: TwitterFeedsUserIdFkeyInput
}

"""
Input for the nested mutation of `user` in the `TwitterFeedInput` mutation.
"""
input TwitterFeedsUserIdFkeyInput {
  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectById: UserUsersPkeyConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectByUsername: UserUsersUsernameKeyConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  connectByNodeId: UserNodeIdConnect

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteById: UserUsersPkeyDelete

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteByUsername: UserUsersUsernameKeyDelete

  """
  The primary key(s) for `user` for the far side of the relationship.
  """
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnTwitterFeedForTwitterFeedsUserIdFkeyUsingUsersPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByUsername: UserOnTwitterFeedForTwitterFeedsUserIdFkeyUsingUsersUsernameKeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: TwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: TwitterFeedsUserIdFkeyUsersCreateInput
}

"""
The fields on `user` to look up the row to update.
"""
input UserOnTwitterFeedForTwitterFeedsUserIdFkeyUsingUsersPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnTwitterFeedForTwitterFeedsUserIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnTwitterFeedForTwitterFeedsUserIdFkeyPatch {
  id: Int
  username: String
  hashedPassword: String
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
Input for the nested mutation of `collection` in the `UserInput` mutation.
"""
input CollectionsUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `collection` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectById: [CollectionCollectionsPkeyConnect!]

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByTitleAndUserId: [CollectionCollectionUniqueTitleConnect!]

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByNodeId: [CollectionNodeIdConnect!]

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteById: [CollectionCollectionsPkeyDelete!]

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByTitleAndUserId: [CollectionCollectionUniqueTitleDelete!]

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByNodeId: [CollectionNodeIdDelete!]

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateById: [CollectionOnCollectionForCollectionsUserIdFkeyUsingCollectionsPkeyUpdate!]

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByTitleAndUserId: [CollectionOnCollectionForCollectionsUserIdFkeyUsingCollectionUniqueTitleUpdate!]

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByNodeId: [UserOnCollectionForCollectionsUserIdFkeyNodeIdUpdate!]

  """
  A `CollectionInput` object that will be created and connected to this object.
  """
  create: [CollectionsUserIdFkeyCollectionsCreateInput!]
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionForCollectionsUserIdFkeyUsingCollectionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionForCollectionsUserIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collection` being updated.
"""
input updateCollectionOnCollectionForCollectionsUserIdFkeyPatch {
  id: Int
  title: String
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `collectionTweet` in the `CollectionInput` mutation.
"""
input CollectionTweetsCollectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `collectionTweet` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  connectById: [CollectionTweetCollectionTweetsPkeyConnect!]

  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  connectByNodeId: [CollectionTweetNodeIdConnect!]

  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  deleteById: [CollectionTweetCollectionTweetsPkeyDelete!]

  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  deleteByNodeId: [CollectionTweetNodeIdDelete!]

  """
  The primary key(s) and patch data for `collectionTweet` for the far side of the relationship.
  """
  updateById: [CollectionTweetOnCollectionTweetForCollectionTweetsCollectionIdFkeyUsingCollectionTweetsPkeyUpdate!]

  """
  The primary key(s) and patch data for `collectionTweet` for the far side of the relationship.
  """
  updateByNodeId: [CollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyNodeIdUpdate!]

  """
  A `CollectionTweetInput` object that will be created and connected to this object.
  """
  create: [CollectionTweetsCollectionIdFkeyCollectionTweetsCreateInput!]
}

"""
The fields on `collectionTweet` to look up the row to connect.
"""
input CollectionTweetCollectionTweetsPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input CollectionTweetNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `collectionTweet` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `collectionTweet` to look up the row to delete.
"""
input CollectionTweetCollectionTweetsPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input CollectionTweetNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `collectionTweet` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `collectionTweet` to look up the row to update.
"""
input CollectionTweetOnCollectionTweetForCollectionTweetsCollectionIdFkeyUsingCollectionTweetsPkeyUpdate {
  """
  An object where the defined keys will be set on the `collectionTweet` being updated.
  """
  patch: updateCollectionTweetOnCollectionTweetForCollectionTweetsCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collectionTweet` being updated.
"""
input updateCollectionTweetOnCollectionTweetForCollectionTweetsCollectionIdFkeyPatch {
  id: Int
  tweetId: String
  createdAt: Datetime
  authorId: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  publishedAt: String
  collection: CollectionTweetsCollectionIdFkeyInput
  collectionTweetPhotos: CollectionTweetPhotosCollectionTweetIdFkeyInverseInput
}

"""
Input for the nested mutation of `collection` in the `CollectionTweetInput` mutation.
"""
input CollectionTweetsCollectionIdFkeyInput {
  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectById: CollectionCollectionsPkeyConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByTitleAndUserId: CollectionCollectionUniqueTitleConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByNodeId: CollectionNodeIdConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteById: CollectionCollectionsPkeyDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByTitleAndUserId: CollectionCollectionUniqueTitleDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByNodeId: CollectionNodeIdDelete

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateById: CollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyUsingCollectionsPkeyUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByTitleAndUserId: CollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyUsingCollectionUniqueTitleUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByNodeId: CollectionTweetOnCollectionTweetForCollectionTweetsCollectionIdFkeyNodeIdUpdate

  """
  A `CollectionInput` object that will be created and connected to this object.
  """
  create: CollectionTweetsCollectionIdFkeyCollectionsCreateInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyUsingCollectionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collection` being updated.
"""
input updateCollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyPatch {
  id: Int
  title: String
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `collectionArticle` in the `CollectionInput` mutation.
"""
input CollectionArticlesCollectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `collectionArticle` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `collectionArticle` for the far side of the relationship.
  """
  connectById: [CollectionArticleCollectionArticlesPkeyConnect!]

  """
  The primary key(s) for `collectionArticle` for the far side of the relationship.
  """
  connectByNodeId: [CollectionArticleNodeIdConnect!]

  """
  The primary key(s) for `collectionArticle` for the far side of the relationship.
  """
  deleteById: [CollectionArticleCollectionArticlesPkeyDelete!]

  """
  The primary key(s) for `collectionArticle` for the far side of the relationship.
  """
  deleteByNodeId: [CollectionArticleNodeIdDelete!]

  """
  The primary key(s) and patch data for `collectionArticle` for the far side of the relationship.
  """
  updateById: [CollectionArticleOnCollectionArticleForCollectionArticlesCollectionIdFkeyUsingCollectionArticlesPkeyUpdate!]

  """
  The primary key(s) and patch data for `collectionArticle` for the far side of the relationship.
  """
  updateByNodeId: [CollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyNodeIdUpdate!]

  """
  A `CollectionArticleInput` object that will be created and connected to this object.
  """
  create: [CollectionArticlesCollectionIdFkeyCollectionArticlesCreateInput!]
}

"""
The fields on `collectionArticle` to look up the row to connect.
"""
input CollectionArticleCollectionArticlesPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input CollectionArticleNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `collectionArticle` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `collectionArticle` to look up the row to delete.
"""
input CollectionArticleCollectionArticlesPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input CollectionArticleNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `collectionArticle` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `collectionArticle` to look up the row to update.
"""
input CollectionArticleOnCollectionArticleForCollectionArticlesCollectionIdFkeyUsingCollectionArticlesPkeyUpdate {
  """
  An object where the defined keys will be set on the `collectionArticle` being updated.
  """
  patch: updateCollectionArticleOnCollectionArticleForCollectionArticlesCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collectionArticle` being updated.
"""
input updateCollectionArticleOnCollectionArticleForCollectionArticlesCollectionIdFkeyPatch {
  id: Int
  description: String
  publishedAt: String
  sourceName: String
  title: String
  url: String
  urlToImage: String
  createdAt: Datetime
  suggestedKeywords: [String]
  collection: CollectionArticlesCollectionIdFkeyInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collectionArticle` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collectionArticle` being updated.
  """
  patch: CollectionArticlePatch!
}

"""
Represents an update to a `CollectionArticle`. Fields that are set will be updated.
"""
input CollectionArticlePatch {
  id: Int
  description: String
  publishedAt: String
  sourceName: String
  title: String
  url: String
  urlToImage: String
  collectionId: Int
  createdAt: Datetime
  suggestedKeywords: [String]
  collection: CollectionArticlesCollectionIdFkeyInput
}

"""
The `collectionArticle` to be created by this mutation.
"""
input CollectionArticlesCollectionIdFkeyCollectionArticlesCreateInput {
  id: Int
  description: String
  publishedAt: String
  sourceName: String
  title: String
  url: String
  urlToImage: String
  createdAt: Datetime
  suggestedKeywords: [String]
  collection: CollectionArticlesCollectionIdFkeyInput
}

"""
Input for the nested mutation of `collectionVeraFile` in the `CollectionInput` mutation.
"""
input CollectionVeraFilesCollectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `collectionVeraFile` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `collectionVeraFile` for the far side of the relationship.
  """
  connectById: [CollectionVeraFileCollectionVeraFilesPkeyConnect!]

  """
  The primary key(s) for `collectionVeraFile` for the far side of the relationship.
  """
  connectByNodeId: [CollectionVeraFileNodeIdConnect!]

  """
  The primary key(s) for `collectionVeraFile` for the far side of the relationship.
  """
  deleteById: [CollectionVeraFileCollectionVeraFilesPkeyDelete!]

  """
  The primary key(s) for `collectionVeraFile` for the far side of the relationship.
  """
  deleteByNodeId: [CollectionVeraFileNodeIdDelete!]

  """
  The primary key(s) and patch data for `collectionVeraFile` for the far side of the relationship.
  """
  updateById: [CollectionVeraFileOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyUsingCollectionVeraFilesPkeyUpdate!]

  """
  The primary key(s) and patch data for `collectionVeraFile` for the far side of the relationship.
  """
  updateByNodeId: [CollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyNodeIdUpdate!]

  """
  A `CollectionVeraFileInput` object that will be created and connected to this object.
  """
  create: [CollectionVeraFilesCollectionIdFkeyCollectionVeraFilesCreateInput!]
}

"""
The fields on `collectionVeraFile` to look up the row to connect.
"""
input CollectionVeraFileCollectionVeraFilesPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input CollectionVeraFileNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `collectionVeraFile` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `collectionVeraFile` to look up the row to delete.
"""
input CollectionVeraFileCollectionVeraFilesPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input CollectionVeraFileNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `collectionVeraFile` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `collectionVeraFile` to look up the row to update.
"""
input CollectionVeraFileOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyUsingCollectionVeraFilesPkeyUpdate {
  """
  An object where the defined keys will be set on the `collectionVeraFile` being updated.
  """
  patch: updateCollectionVeraFileOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collectionVeraFile` being updated.
"""
input updateCollectionVeraFileOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyPatch {
  id: Int
  author: String
  category: String
  date: String
  dateText: String
  description: String
  imageStyle: String
  imageUrl: String
  url: String
  title: String
  createdAt: Datetime
  collection: CollectionVeraFilesCollectionIdFkeyInput
}

"""
Input for the nested mutation of `collection` in the `CollectionVeraFileInput` mutation.
"""
input CollectionVeraFilesCollectionIdFkeyInput {
  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectById: CollectionCollectionsPkeyConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByTitleAndUserId: CollectionCollectionUniqueTitleConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByNodeId: CollectionNodeIdConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteById: CollectionCollectionsPkeyDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByTitleAndUserId: CollectionCollectionUniqueTitleDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByNodeId: CollectionNodeIdDelete

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateById: CollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyUsingCollectionsPkeyUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByTitleAndUserId: CollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyUsingCollectionUniqueTitleUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByNodeId: CollectionVeraFileOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyNodeIdUpdate

  """
  A `CollectionInput` object that will be created and connected to this object.
  """
  create: CollectionVeraFilesCollectionIdFkeyCollectionsCreateInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyUsingCollectionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collection` being updated.
"""
input updateCollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyPatch {
  id: Int
  title: String
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `collectionGoogleFactCheck` in the `CollectionInput` mutation.
"""
input CollectionGoogleFactCheckCollectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `collectionGoogleFactCheck` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `collectionGoogleFactCheck` for the far side of the relationship.
  """
  connectById: [CollectionGoogleFactCheckCollectionGoogleFactCheckPkeyConnect!]

  """
  The primary key(s) for `collectionGoogleFactCheck` for the far side of the relationship.
  """
  connectByNodeId: [CollectionGoogleFactCheckNodeIdConnect!]

  """
  The primary key(s) for `collectionGoogleFactCheck` for the far side of the relationship.
  """
  deleteById: [CollectionGoogleFactCheckCollectionGoogleFactCheckPkeyDelete!]

  """
  The primary key(s) for `collectionGoogleFactCheck` for the far side of the relationship.
  """
  deleteByNodeId: [CollectionGoogleFactCheckNodeIdDelete!]

  """
  The primary key(s) and patch data for `collectionGoogleFactCheck` for the far side of the relationship.
  """
  updateById: [CollectionGoogleFactCheckOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyUsingCollectionGoogleFactCheckPkeyUpdate!]

  """
  The primary key(s) and patch data for `collectionGoogleFactCheck` for the far side of the relationship.
  """
  updateByNodeId: [CollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyNodeIdUpdate!]

  """
  A `CollectionGoogleFactCheckInput` object that will be created and connected to this object.
  """
  create: [CollectionGoogleFactCheckCollectionIdFkeyCollectionGoogleFactCheckCreateInput!]
}

"""
The fields on `collectionGoogleFactCheck` to look up the row to connect.
"""
input CollectionGoogleFactCheckCollectionGoogleFactCheckPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input CollectionGoogleFactCheckNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `collectionGoogleFactCheck` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `collectionGoogleFactCheck` to look up the row to delete.
"""
input CollectionGoogleFactCheckCollectionGoogleFactCheckPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input CollectionGoogleFactCheckNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `collectionGoogleFactCheck` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `collectionGoogleFactCheck` to look up the row to update.
"""
input CollectionGoogleFactCheckOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyUsingCollectionGoogleFactCheckPkeyUpdate {
  """
  An object where the defined keys will be set on the `collectionGoogleFactCheck` being updated.
  """
  patch: updateCollectionGoogleFactCheckOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collectionGoogleFactCheck` being updated.
"""
input updateCollectionGoogleFactCheckOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyPatch {
  id: Int
  text: String
  claimant: String
  claimDate: String
  publisherName: String
  publisherSite: String
  url: String
  title: String
  reviewDate: String
  textualRating: String
  languageCode: String
  createdAt: Datetime
  collection: CollectionGoogleFactCheckCollectionIdFkeyInput
}

"""
Input for the nested mutation of `collection` in the `CollectionGoogleFactCheckInput` mutation.
"""
input CollectionGoogleFactCheckCollectionIdFkeyInput {
  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectById: CollectionCollectionsPkeyConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByTitleAndUserId: CollectionCollectionUniqueTitleConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  connectByNodeId: CollectionNodeIdConnect

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteById: CollectionCollectionsPkeyDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByTitleAndUserId: CollectionCollectionUniqueTitleDelete

  """
  The primary key(s) for `collection` for the far side of the relationship.
  """
  deleteByNodeId: CollectionNodeIdDelete

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateById: CollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyUsingCollectionsPkeyUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByTitleAndUserId: CollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyUsingCollectionUniqueTitleUpdate

  """
  The primary key(s) and patch data for `collection` for the far side of the relationship.
  """
  updateByNodeId: CollectionGoogleFactCheckOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyNodeIdUpdate

  """
  A `CollectionInput` object that will be created and connected to this object.
  """
  create: CollectionGoogleFactCheckCollectionIdFkeyCollectionsCreateInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyUsingCollectionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collection` being updated.
"""
input updateCollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyPatch {
  id: Int
  title: String
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyUsingCollectionUniqueTitleUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyPatch!
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionGoogleFactCheckOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: CollectionPatch!
}

"""
Represents an update to a `Collection`. Fields that are set will be updated.
"""
input CollectionPatch {
  id: Int
  title: String
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
The `collection` to be created by this mutation.
"""
input CollectionGoogleFactCheckCollectionIdFkeyCollectionsCreateInput {
  id: Int
  title: String!
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionOnCollectionGoogleFactCheckForCollectionGoogleFactCheckCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collectionGoogleFactCheck` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collectionGoogleFactCheck` being updated.
  """
  patch: CollectionGoogleFactCheckPatch!
}

"""
Represents an update to a `CollectionGoogleFactCheck`. Fields that are set will be updated.
"""
input CollectionGoogleFactCheckPatch {
  id: Int
  text: String
  claimant: String
  claimDate: String
  publisherName: String
  publisherSite: String
  url: String
  title: String
  reviewDate: String
  textualRating: String
  languageCode: String
  collectionId: Int
  createdAt: Datetime
  collection: CollectionGoogleFactCheckCollectionIdFkeyInput
}

"""
The `collectionGoogleFactCheck` to be created by this mutation.
"""
input CollectionGoogleFactCheckCollectionIdFkeyCollectionGoogleFactCheckCreateInput {
  id: Int
  text: String
  claimant: String
  claimDate: String
  publisherName: String
  publisherSite: String
  url: String
  title: String
  reviewDate: String
  textualRating: String
  languageCode: String
  createdAt: Datetime
  collection: CollectionGoogleFactCheckCollectionIdFkeyInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyUsingCollectionUniqueTitleUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyPatch!
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionVeraFileOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: CollectionPatch!
}

"""
The `collection` to be created by this mutation.
"""
input CollectionVeraFilesCollectionIdFkeyCollectionsCreateInput {
  id: Int
  title: String!
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionOnCollectionVeraFileForCollectionVeraFilesCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collectionVeraFile` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collectionVeraFile` being updated.
  """
  patch: CollectionVeraFilePatch!
}

"""
Represents an update to a `CollectionVeraFile`. Fields that are set will be updated.
"""
input CollectionVeraFilePatch {
  id: Int
  author: String
  category: String
  date: String
  dateText: String
  description: String
  imageStyle: String
  imageUrl: String
  url: String
  title: String
  collectionId: Int
  createdAt: Datetime
  collection: CollectionVeraFilesCollectionIdFkeyInput
}

"""
The `collectionVeraFile` to be created by this mutation.
"""
input CollectionVeraFilesCollectionIdFkeyCollectionVeraFilesCreateInput {
  id: Int
  author: String
  category: String
  date: String
  dateText: String
  description: String
  imageStyle: String
  imageUrl: String
  url: String
  title: String
  createdAt: Datetime
  collection: CollectionVeraFilesCollectionIdFkeyInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyUsingCollectionUniqueTitleUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyPatch!
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionTweetOnCollectionTweetForCollectionTweetsCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: CollectionPatch!
}

"""
The `collection` to be created by this mutation.
"""
input CollectionTweetsCollectionIdFkeyCollectionsCreateInput {
  id: Int
  title: String!
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `collectionTweetPhoto` in the `CollectionTweetInput` mutation.
"""
input CollectionTweetPhotosCollectionTweetIdFkeyInverseInput {
  """
  Flag indicating whether all other `collectionTweetPhoto` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `collectionTweetPhoto` for the far side of the relationship.
  """
  connectById: [CollectionTweetPhotoCollectionTweetPhotosPkeyConnect!]

  """
  The primary key(s) for `collectionTweetPhoto` for the far side of the relationship.
  """
  connectByNodeId: [CollectionTweetPhotoNodeIdConnect!]

  """
  The primary key(s) for `collectionTweetPhoto` for the far side of the relationship.
  """
  deleteById: [CollectionTweetPhotoCollectionTweetPhotosPkeyDelete!]

  """
  The primary key(s) for `collectionTweetPhoto` for the far side of the relationship.
  """
  deleteByNodeId: [CollectionTweetPhotoNodeIdDelete!]

  """
  The primary key(s) and patch data for `collectionTweetPhoto` for the far side of the relationship.
  """
  updateById: [CollectionTweetPhotoOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyUsingCollectionTweetPhotosPkeyUpdate!]

  """
  The primary key(s) and patch data for `collectionTweetPhoto` for the far side of the relationship.
  """
  updateByNodeId: [CollectionTweetOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyNodeIdUpdate!]

  """
  A `CollectionTweetPhotoInput` object that will be created and connected to this object.
  """
  create: [CollectionTweetPhotosCollectionTweetIdFkeyCollectionTweetPhotosCreateInput!]
}

"""
The fields on `collectionTweetPhoto` to look up the row to connect.
"""
input CollectionTweetPhotoCollectionTweetPhotosPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input CollectionTweetPhotoNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `collectionTweetPhoto` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `collectionTweetPhoto` to look up the row to delete.
"""
input CollectionTweetPhotoCollectionTweetPhotosPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input CollectionTweetPhotoNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `collectionTweetPhoto` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `collectionTweetPhoto` to look up the row to update.
"""
input CollectionTweetPhotoOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyUsingCollectionTweetPhotosPkeyUpdate {
  """
  An object where the defined keys will be set on the `collectionTweetPhoto` being updated.
  """
  patch: updateCollectionTweetPhotoOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collectionTweetPhoto` being updated.
"""
input updateCollectionTweetPhotoOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyPatch {
  id: Int
  mediaKey: String
  type: String
  url: String
  collectionTweet: CollectionTweetPhotosCollectionTweetIdFkeyInput
}

"""
Input for the nested mutation of `collectionTweet` in the `CollectionTweetPhotoInput` mutation.
"""
input CollectionTweetPhotosCollectionTweetIdFkeyInput {
  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  connectById: CollectionTweetCollectionTweetsPkeyConnect

  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  connectByNodeId: CollectionTweetNodeIdConnect

  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  deleteById: CollectionTweetCollectionTweetsPkeyDelete

  """
  The primary key(s) for `collectionTweet` for the far side of the relationship.
  """
  deleteByNodeId: CollectionTweetNodeIdDelete

  """
  The primary key(s) and patch data for `collectionTweet` for the far side of the relationship.
  """
  updateById: CollectionTweetOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyUsingCollectionTweetsPkeyUpdate

  """
  The primary key(s) and patch data for `collectionTweet` for the far side of the relationship.
  """
  updateByNodeId: CollectionTweetPhotoOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyNodeIdUpdate

  """
  A `CollectionTweetInput` object that will be created and connected to this object.
  """
  create: CollectionTweetPhotosCollectionTweetIdFkeyCollectionTweetsCreateInput
}

"""
The fields on `collectionTweet` to look up the row to update.
"""
input CollectionTweetOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyUsingCollectionTweetsPkeyUpdate {
  """
  An object where the defined keys will be set on the `collectionTweet` being updated.
  """
  patch: updateCollectionTweetOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `collectionTweet` being updated.
"""
input updateCollectionTweetOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyPatch {
  id: Int
  tweetId: String
  collectionId: Int
  createdAt: Datetime
  authorId: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  publishedAt: String
  collection: CollectionTweetsCollectionIdFkeyInput
  collectionTweetPhotos: CollectionTweetPhotosCollectionTweetIdFkeyInverseInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionTweetPhotoOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collectionTweet` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collectionTweet` being updated.
  """
  patch: CollectionTweetPatch!
}

"""
Represents an update to a `CollectionTweet`. Fields that are set will be updated.
"""
input CollectionTweetPatch {
  id: Int
  tweetId: String
  collectionId: Int
  createdAt: Datetime
  authorId: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  publishedAt: String
  collection: CollectionTweetsCollectionIdFkeyInput
  collectionTweetPhotos: CollectionTweetPhotosCollectionTweetIdFkeyInverseInput
}

"""
The `collectionTweet` to be created by this mutation.
"""
input CollectionTweetPhotosCollectionTweetIdFkeyCollectionTweetsCreateInput {
  id: Int
  tweetId: String!
  collectionId: Int
  createdAt: Datetime
  authorId: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  publishedAt: String
  collection: CollectionTweetsCollectionIdFkeyInput
  collectionTweetPhotos: CollectionTweetPhotosCollectionTweetIdFkeyInverseInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionTweetOnCollectionTweetPhotoForCollectionTweetPhotosCollectionTweetIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collectionTweetPhoto` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collectionTweetPhoto` being updated.
  """
  patch: CollectionTweetPhotoPatch!
}

"""
Represents an update to a `CollectionTweetPhoto`. Fields that are set will be updated.
"""
input CollectionTweetPhotoPatch {
  id: Int
  mediaKey: String
  type: String
  url: String
  collectionTweetId: Int
  collectionTweet: CollectionTweetPhotosCollectionTweetIdFkeyInput
}

"""
The `collectionTweetPhoto` to be created by this mutation.
"""
input CollectionTweetPhotosCollectionTweetIdFkeyCollectionTweetPhotosCreateInput {
  id: Int
  mediaKey: String
  type: String
  url: String
  collectionTweet: CollectionTweetPhotosCollectionTweetIdFkeyInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionOnCollectionTweetForCollectionTweetsCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collectionTweet` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collectionTweet` being updated.
  """
  patch: CollectionTweetPatch!
}

"""
The `collectionTweet` to be created by this mutation.
"""
input CollectionTweetsCollectionIdFkeyCollectionTweetsCreateInput {
  id: Int
  tweetId: String!
  createdAt: Datetime
  authorId: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  publishedAt: String
  collection: CollectionTweetsCollectionIdFkeyInput
  collectionTweetPhotos: CollectionTweetPhotosCollectionTweetIdFkeyInverseInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionForCollectionsUserIdFkeyUsingCollectionUniqueTitleUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionForCollectionsUserIdFkeyPatch!
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to update.
"""
input UserOnCollectionForCollectionsUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: CollectionPatch!
}

"""
The `collection` to be created by this mutation.
"""
input CollectionsUserIdFkeyCollectionsCreateInput {
  id: Int
  title: String!
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
The fields on `user` to look up the row to update.
"""
input UserOnTwitterFeedForTwitterFeedsUserIdFkeyUsingUsersUsernameKeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnTwitterFeedForTwitterFeedsUserIdFkeyPatch!
  username: String!
}

"""
The globally unique `ID` look up for the row to update.
"""
input TwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: UserPatch!
}

"""
Represents an update to a `User`. Fields that are set will be updated.
"""
input UserPatch {
  id: Int
  username: String
  hashedPassword: String
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
The `user` to be created by this mutation.
"""
input TwitterFeedsUserIdFkeyUsersCreateInput {
  id: Int
  username: String!
  hashedPassword: String!
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
The fields on `twitterFeed` to look up the row to update.
"""
input TwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyUsingTwitterFeedUniqueTitleUpdate {
  """
  An object where the defined keys will be set on the `twitterFeed` being updated.
  """
  patch: updateTwitterFeedOnTwitterFeedForTwitterFeedsUserIdFkeyPatch!
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to update.
"""
input UserOnTwitterFeedForTwitterFeedsUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `twitterFeed` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `twitterFeed` being updated.
  """
  patch: TwitterFeedPatch!
}

"""
Represents an update to a `TwitterFeed`. Fields that are set will be updated.
"""
input TwitterFeedPatch {
  id: Int
  title: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
  user: TwitterFeedsUserIdFkeyInput
}

"""
The `twitterFeed` to be created by this mutation.
"""
input TwitterFeedsUserIdFkeyTwitterFeedsCreateInput {
  id: Int
  title: String!
  keyword: String
  sources: String
  createdAt: Datetime
  user: TwitterFeedsUserIdFkeyInput
}

"""
The fields on `user` to look up the row to update.
"""
input UserOnNewsFeedForNewsFeedsUserIdFkeyUsingUsersUsernameKeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnNewsFeedForNewsFeedsUserIdFkeyPatch!
  username: String!
}

"""
The globally unique `ID` look up for the row to update.
"""
input NewsFeedOnNewsFeedForNewsFeedsUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: UserPatch!
}

"""
The `user` to be created by this mutation.
"""
input NewsFeedsUserIdFkeyUsersCreateInput {
  id: Int
  username: String!
  hashedPassword: String!
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
The fields on `newsFeed` to look up the row to update.
"""
input NewsFeedOnNewsFeedForNewsFeedsUserIdFkeyUsingNewsFeedUniqueTitleUpdate {
  """
  An object where the defined keys will be set on the `newsFeed` being updated.
  """
  patch: updateNewsFeedOnNewsFeedForNewsFeedsUserIdFkeyPatch!
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to update.
"""
input UserOnNewsFeedForNewsFeedsUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `newsFeed` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `newsFeed` being updated.
  """
  patch: NewsFeedPatch!
}

"""
Represents an update to a `NewsFeed`. Fields that are set will be updated.
"""
input NewsFeedPatch {
  id: Int
  title: String
  category: Category
  country: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
  user: NewsFeedsUserIdFkeyInput
}

"""
The `newsFeed` to be created by this mutation.
"""
input NewsFeedsUserIdFkeyNewsFeedsCreateInput {
  id: Int
  title: String!
  category: Category
  country: String
  keyword: String
  sources: String
  createdAt: Datetime
  user: NewsFeedsUserIdFkeyInput
}

"""
The fields on `user` to look up the row to update.
"""
input UserOnCollectionForCollectionsUserIdFkeyUsingUsersUsernameKeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnCollectionForCollectionsUserIdFkeyPatch!
  username: String!
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionOnCollectionForCollectionsUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: UserPatch!
}

"""
The `user` to be created by this mutation.
"""
input CollectionsUserIdFkeyUsersCreateInput {
  id: Int
  username: String!
  hashedPassword: String!
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
The fields on `collection` to look up the row to update.
"""
input CollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyUsingCollectionUniqueTitleUpdate {
  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: updateCollectionOnCollectionArticleForCollectionArticlesCollectionIdFkeyPatch!
  title: String!
  userId: Int!
}

"""
The globally unique `ID` look up for the row to update.
"""
input CollectionArticleOnCollectionArticleForCollectionArticlesCollectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `collection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `collection` being updated.
  """
  patch: CollectionPatch!
}

"""
The `collection` to be created by this mutation.
"""
input CollectionArticlesCollectionIdFkeyCollectionsCreateInput {
  id: Int
  title: String!
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
The output of our create `CollectionGoogleFactCheck` mutation.
"""
type CreateCollectionGoogleFactCheckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionGoogleFactCheck` that was created by this mutation.
  """
  collectionGoogleFactCheck: CollectionGoogleFactCheck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionGoogleFactCheck`.
  """
  collection: Collection

  """
  An edge for our `CollectionGoogleFactCheck`. May be used by Relay 1.
  """
  collectionGoogleFactCheckEdge(
    """
    The method to use when ordering `CollectionGoogleFactCheck`.
    """
    orderBy: [CollectionGoogleFactChecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionGoogleFactChecksEdge
}

"""
All input for the create `CollectionGoogleFactCheck` mutation.
"""
input CreateCollectionGoogleFactCheckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CollectionGoogleFactCheck` to be created by this mutation.
  """
  collectionGoogleFactCheck: CollectionGoogleFactCheckInput!
}

"""
An input for mutations affecting `CollectionGoogleFactCheck`
"""
input CollectionGoogleFactCheckInput {
  id: Int
  text: String
  claimant: String
  claimDate: String
  publisherName: String
  publisherSite: String
  url: String
  title: String
  reviewDate: String
  textualRating: String
  languageCode: String
  collectionId: Int
  createdAt: Datetime
  collection: CollectionGoogleFactCheckCollectionIdFkeyInput
}

"""
The output of our create `CollectionTweetPhoto` mutation.
"""
type CreateCollectionTweetPhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweetPhoto` that was created by this mutation.
  """
  collectionTweetPhoto: CollectionTweetPhoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CollectionTweet` that is related to this `CollectionTweetPhoto`.
  """
  collectionTweet: CollectionTweet

  """
  An edge for our `CollectionTweetPhoto`. May be used by Relay 1.
  """
  collectionTweetPhotoEdge(
    """
    The method to use when ordering `CollectionTweetPhoto`.
    """
    orderBy: [CollectionTweetPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetPhotosEdge
}

"""
All input for the create `CollectionTweetPhoto` mutation.
"""
input CreateCollectionTweetPhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CollectionTweetPhoto` to be created by this mutation.
  """
  collectionTweetPhoto: CollectionTweetPhotoInput!
}

"""
An input for mutations affecting `CollectionTweetPhoto`
"""
input CollectionTweetPhotoInput {
  id: Int
  mediaKey: String
  type: String
  url: String
  collectionTweetId: Int
  collectionTweet: CollectionTweetPhotosCollectionTweetIdFkeyInput
}

"""
The output of our create `CollectionTweet` mutation.
"""
type CreateCollectionTweetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweet` that was created by this mutation.
  """
  collectionTweet: CollectionTweet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection

  """
  An edge for our `CollectionTweet`. May be used by Relay 1.
  """
  collectionTweetEdge(
    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetsEdge
}

"""
All input for the create `CollectionTweet` mutation.
"""
input CreateCollectionTweetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CollectionTweet` to be created by this mutation.
  """
  collectionTweet: CollectionTweetInput!
}

"""
An input for mutations affecting `CollectionTweet`
"""
input CollectionTweetInput {
  id: Int
  tweetId: String!
  collectionId: Int
  createdAt: Datetime
  authorId: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  publishedAt: String
  collection: CollectionTweetsCollectionIdFkeyInput
  collectionTweetPhotos: CollectionTweetPhotosCollectionTweetIdFkeyInverseInput
}

"""
The output of our create `CollectionVeraFile` mutation.
"""
type CreateCollectionVeraFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionVeraFile` that was created by this mutation.
  """
  collectionVeraFile: CollectionVeraFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionVeraFile`.
  """
  collection: Collection

  """
  An edge for our `CollectionVeraFile`. May be used by Relay 1.
  """
  collectionVeraFileEdge(
    """
    The method to use when ordering `CollectionVeraFile`.
    """
    orderBy: [CollectionVeraFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionVeraFilesEdge
}

"""
All input for the create `CollectionVeraFile` mutation.
"""
input CreateCollectionVeraFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CollectionVeraFile` to be created by this mutation.
  """
  collectionVeraFile: CollectionVeraFileInput!
}

"""
An input for mutations affecting `CollectionVeraFile`
"""
input CollectionVeraFileInput {
  id: Int
  author: String
  category: String
  date: String
  dateText: String
  description: String
  imageStyle: String
  imageUrl: String
  url: String
  title: String
  collectionId: Int
  createdAt: Datetime
  collection: CollectionVeraFilesCollectionIdFkeyInput
}

"""
The output of our create `Collection` mutation.
"""
type CreateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Collection` that was created by this mutation.
  """
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  An edge for our `Collection`. May be used by Relay 1.
  """
  collectionEdge(
    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the create `Collection` mutation.
"""
input CreateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Collection` to be created by this mutation.
  """
  collection: CollectionInput!
}

"""
An input for mutations affecting `Collection`
"""
input CollectionInput {
  id: Int
  title: String!
  userId: Int
  createdAt: Datetime
  user: CollectionsUserIdFkeyInput
  collectionTweets: CollectionTweetsCollectionIdFkeyInverseInput
  collectionArticles: CollectionArticlesCollectionIdFkeyInverseInput
  collectionVeraFiles: CollectionVeraFilesCollectionIdFkeyInverseInput
  collectionGoogleFactChecks: CollectionGoogleFactCheckCollectionIdFkeyInverseInput
}

"""
The output of our create `NewsFeed` mutation.
"""
type CreateNewsFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `NewsFeed` that was created by this mutation.
  """
  newsFeed: NewsFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User

  """
  An edge for our `NewsFeed`. May be used by Relay 1.
  """
  newsFeedEdge(
    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsFeedsEdge
}

"""
All input for the create `NewsFeed` mutation.
"""
input CreateNewsFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `NewsFeed` to be created by this mutation.
  """
  newsFeed: NewsFeedInput!
}

"""
An input for mutations affecting `NewsFeed`
"""
input NewsFeedInput {
  id: Int
  title: String!
  category: Category
  country: String
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
  user: NewsFeedsUserIdFkeyInput
}

"""
The output of our create `TopHeadlinesCache` mutation.
"""
type CreateTopHeadlinesCachePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TopHeadlinesCache` that was created by this mutation.
  """
  topHeadlinesCache: TopHeadlinesCache

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TopHeadlinesRequest` that is related to this `TopHeadlinesCache`.
  """
  topHeadlinesRequest: TopHeadlinesRequest

  """
  An edge for our `TopHeadlinesCache`. May be used by Relay 1.
  """
  topHeadlinesCacheEdge(
    """
    The method to use when ordering `TopHeadlinesCache`.
    """
    orderBy: [TopHeadlinesCachesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopHeadlinesCachesEdge
}

"""
All input for the create `TopHeadlinesCache` mutation.
"""
input CreateTopHeadlinesCacheInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TopHeadlinesCache` to be created by this mutation.
  """
  topHeadlinesCache: TopHeadlinesCacheInput!
}

"""
An input for mutations affecting `TopHeadlinesCache`
"""
input TopHeadlinesCacheInput {
  id: Int
  author: String
  content: String
  description: String
  publishedAt: String
  sourceName: String
  sourceId: String
  title: String
  url: String
  urlToImage: String
  topHeadlinesRequestId: Int
  suggestedKeywords: [String]
  topHeadlinesRequest: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInput
}

"""
Input for the nested mutation of `topHeadlinesRequest` in the `TopHeadlinesCacheInput` mutation.
"""
input TopHeadlinesCacheTopHeadlinesRequestIdFkeyInput {
  """
  The primary key(s) for `topHeadlinesRequest` for the far side of the relationship.
  """
  connectById: TopHeadlinesRequestTopHeadlinesRequestsPkeyConnect

  """
  The primary key(s) for `topHeadlinesRequest` for the far side of the relationship.
  """
  connectByNodeId: TopHeadlinesRequestNodeIdConnect

  """
  The primary key(s) for `topHeadlinesRequest` for the far side of the relationship.
  """
  deleteById: TopHeadlinesRequestTopHeadlinesRequestsPkeyDelete

  """
  The primary key(s) for `topHeadlinesRequest` for the far side of the relationship.
  """
  deleteByNodeId: TopHeadlinesRequestNodeIdDelete

  """
  The primary key(s) and patch data for `topHeadlinesRequest` for the far side of the relationship.
  """
  updateById: TopHeadlinesRequestOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyUsingTopHeadlinesRequestsPkeyUpdate

  """
  The primary key(s) and patch data for `topHeadlinesRequest` for the far side of the relationship.
  """
  updateByNodeId: TopHeadlinesCacheOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyNodeIdUpdate

  """
  A `TopHeadlinesRequestInput` object that will be created and connected to this object.
  """
  create: TopHeadlinesCacheTopHeadlinesRequestIdFkeyTopHeadlinesRequestsCreateInput
}

"""
The fields on `topHeadlinesRequest` to look up the row to connect.
"""
input TopHeadlinesRequestTopHeadlinesRequestsPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input TopHeadlinesRequestNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `topHeadlinesRequest` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `topHeadlinesRequest` to look up the row to delete.
"""
input TopHeadlinesRequestTopHeadlinesRequestsPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input TopHeadlinesRequestNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `topHeadlinesRequest` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `topHeadlinesRequest` to look up the row to update.
"""
input TopHeadlinesRequestOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyUsingTopHeadlinesRequestsPkeyUpdate {
  """
  An object where the defined keys will be set on the `topHeadlinesRequest` being updated.
  """
  patch: updateTopHeadlinesRequestOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `topHeadlinesRequest` being updated.
"""
input updateTopHeadlinesRequestOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyPatch {
  id: Int
  category: Category
  country: String
  keyword: String
  sources: String
  createdAt: Datetime
  topHeadlinesCaches: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInverseInput
}

"""
Input for the nested mutation of `topHeadlinesCache` in the `TopHeadlinesRequestInput` mutation.
"""
input TopHeadlinesCacheTopHeadlinesRequestIdFkeyInverseInput {
  """
  Flag indicating whether all other `topHeadlinesCache` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `topHeadlinesCache` for the far side of the relationship.
  """
  connectById: [TopHeadlinesCacheTopHeadlinesPkeyConnect!]

  """
  The primary key(s) for `topHeadlinesCache` for the far side of the relationship.
  """
  connectByNodeId: [TopHeadlinesCacheNodeIdConnect!]

  """
  The primary key(s) for `topHeadlinesCache` for the far side of the relationship.
  """
  deleteById: [TopHeadlinesCacheTopHeadlinesPkeyDelete!]

  """
  The primary key(s) for `topHeadlinesCache` for the far side of the relationship.
  """
  deleteByNodeId: [TopHeadlinesCacheNodeIdDelete!]

  """
  The primary key(s) and patch data for `topHeadlinesCache` for the far side of the relationship.
  """
  updateById: [TopHeadlinesCacheOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyUsingTopHeadlinesPkeyUpdate!]

  """
  The primary key(s) and patch data for `topHeadlinesCache` for the far side of the relationship.
  """
  updateByNodeId: [TopHeadlinesRequestOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyNodeIdUpdate!]

  """
  A `TopHeadlinesCacheInput` object that will be created and connected to this object.
  """
  create: [TopHeadlinesCacheTopHeadlinesRequestIdFkeyTopHeadlinesCacheCreateInput!]
}

"""
The fields on `topHeadlinesCache` to look up the row to connect.
"""
input TopHeadlinesCacheTopHeadlinesPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input TopHeadlinesCacheNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `topHeadlinesCache` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `topHeadlinesCache` to look up the row to delete.
"""
input TopHeadlinesCacheTopHeadlinesPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input TopHeadlinesCacheNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `topHeadlinesCache` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `topHeadlinesCache` to look up the row to update.
"""
input TopHeadlinesCacheOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyUsingTopHeadlinesPkeyUpdate {
  """
  An object where the defined keys will be set on the `topHeadlinesCache` being updated.
  """
  patch: updateTopHeadlinesCacheOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `topHeadlinesCache` being updated.
"""
input updateTopHeadlinesCacheOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyPatch {
  id: Int
  author: String
  content: String
  description: String
  publishedAt: String
  sourceName: String
  sourceId: String
  title: String
  url: String
  urlToImage: String
  suggestedKeywords: [String]
  topHeadlinesRequest: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input TopHeadlinesRequestOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `topHeadlinesCache` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `topHeadlinesCache` being updated.
  """
  patch: TopHeadlinesCachePatch!
}

"""
Represents an update to a `TopHeadlinesCache`. Fields that are set will be updated.
"""
input TopHeadlinesCachePatch {
  id: Int
  author: String
  content: String
  description: String
  publishedAt: String
  sourceName: String
  sourceId: String
  title: String
  url: String
  urlToImage: String
  topHeadlinesRequestId: Int
  suggestedKeywords: [String]
  topHeadlinesRequest: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInput
}

"""
The `topHeadlinesCache` to be created by this mutation.
"""
input TopHeadlinesCacheTopHeadlinesRequestIdFkeyTopHeadlinesCacheCreateInput {
  id: Int
  author: String
  content: String
  description: String
  publishedAt: String
  sourceName: String
  sourceId: String
  title: String
  url: String
  urlToImage: String
  suggestedKeywords: [String]
  topHeadlinesRequest: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input TopHeadlinesCacheOnTopHeadlinesCacheForTopHeadlinesCacheTopHeadlinesRequestIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `topHeadlinesRequest` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `topHeadlinesRequest` being updated.
  """
  patch: TopHeadlinesRequestPatch!
}

"""
Represents an update to a `TopHeadlinesRequest`. Fields that are set will be updated.
"""
input TopHeadlinesRequestPatch {
  id: Int
  category: Category
  country: String
  keyword: String
  sources: String
  createdAt: Datetime
  topHeadlinesCaches: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInverseInput
}

"""
The `topHeadlinesRequest` to be created by this mutation.
"""
input TopHeadlinesCacheTopHeadlinesRequestIdFkeyTopHeadlinesRequestsCreateInput {
  id: Int
  category: Category
  country: String
  keyword: String
  sources: String
  createdAt: Datetime
  topHeadlinesCaches: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInverseInput
}

"""
The output of our create `TopHeadlinesRequest` mutation.
"""
type CreateTopHeadlinesRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TopHeadlinesRequest` that was created by this mutation.
  """
  topHeadlinesRequest: TopHeadlinesRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TopHeadlinesRequest`. May be used by Relay 1.
  """
  topHeadlinesRequestEdge(
    """
    The method to use when ordering `TopHeadlinesRequest`.
    """
    orderBy: [TopHeadlinesRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopHeadlinesRequestsEdge
}

"""
All input for the create `TopHeadlinesRequest` mutation.
"""
input CreateTopHeadlinesRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TopHeadlinesRequest` to be created by this mutation.
  """
  topHeadlinesRequest: TopHeadlinesRequestInput!
}

"""
An input for mutations affecting `TopHeadlinesRequest`
"""
input TopHeadlinesRequestInput {
  id: Int
  category: Category
  country: String
  keyword: String
  sources: String
  createdAt: Datetime
  topHeadlinesCaches: TopHeadlinesCacheTopHeadlinesRequestIdFkeyInverseInput
}

"""
The output of our create `TwitterFeed` mutation.
"""
type CreateTwitterFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterFeed` that was created by this mutation.
  """
  twitterFeed: TwitterFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User

  """
  An edge for our `TwitterFeed`. May be used by Relay 1.
  """
  twitterFeedEdge(
    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterFeedsEdge
}

"""
All input for the create `TwitterFeed` mutation.
"""
input CreateTwitterFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterFeed` to be created by this mutation.
  """
  twitterFeed: TwitterFeedInput!
}

"""
An input for mutations affecting `TwitterFeed`
"""
input TwitterFeedInput {
  id: Int
  title: String!
  keyword: String
  sources: String
  userId: Int
  createdAt: Datetime
  user: TwitterFeedsUserIdFkeyInput
}

"""
The output of our create `TwitterLocalSource` mutation.
"""
type CreateTwitterLocalSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` that was created by this mutation.
  """
  twitterLocalSource: TwitterLocalSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterLocalSource`. May be used by Relay 1.
  """
  twitterLocalSourceEdge(
    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterLocalSourcesEdge
}

"""
All input for the create `TwitterLocalSource` mutation.
"""
input CreateTwitterLocalSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` to be created by this mutation.
  """
  twitterLocalSource: TwitterLocalSourceInput!
}

"""
An input for mutations affecting `TwitterLocalSource`
"""
input TwitterLocalSourceInput {
  accountId: Int
  accountName: String!
  accountUsername: String!
}

"""
The output of our create `TwitterRecentSearchCache` mutation.
"""
type CreateTwitterRecentSearchCachePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCache` that was created by this mutation.
  """
  twitterRecentSearchCache: TwitterRecentSearchCache

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TwitterRecentSearchRequest` that is related to this `TwitterRecentSearchCache`.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequest

  """
  An edge for our `TwitterRecentSearchCache`. May be used by Relay 1.
  """
  twitterRecentSearchCacheEdge(
    """
    The method to use when ordering `TwitterRecentSearchCache`.
    """
    orderBy: [TwitterRecentSearchCachesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchCachesEdge
}

"""
All input for the create `TwitterRecentSearchCache` mutation.
"""
input CreateTwitterRecentSearchCacheInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCache` to be created by this mutation.
  """
  twitterRecentSearchCache: TwitterRecentSearchCacheInput!
}

"""
An input for mutations affecting `TwitterRecentSearchCache`
"""
input TwitterRecentSearchCacheInput {
  id: Int
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  twitterRecentSearchRequestId: Int
  suggestedKeywords: [String]
  twitterRecentSearchRequest: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInput
  twitterRecentSearchCachePhotos: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInverseInput
}

"""
Input for the nested mutation of `twitterRecentSearchRequest` in the `TwitterRecentSearchCacheInput` mutation.
"""
input TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInput {
  """
  The primary key(s) for `twitterRecentSearchRequest` for the far side of the relationship.
  """
  connectById: TwitterRecentSearchRequestTwitterRecentSearchRequestsPkeyConnect

  """
  The primary key(s) for `twitterRecentSearchRequest` for the far side of the relationship.
  """
  connectByNodeId: TwitterRecentSearchRequestNodeIdConnect

  """
  The primary key(s) for `twitterRecentSearchRequest` for the far side of the relationship.
  """
  deleteById: TwitterRecentSearchRequestTwitterRecentSearchRequestsPkeyDelete

  """
  The primary key(s) for `twitterRecentSearchRequest` for the far side of the relationship.
  """
  deleteByNodeId: TwitterRecentSearchRequestNodeIdDelete

  """
  The primary key(s) and patch data for `twitterRecentSearchRequest` for the far side of the relationship.
  """
  updateById: TwitterRecentSearchRequestOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyUsingTwitterRecentSearchRequestsPkeyUpdate

  """
  The primary key(s) and patch data for `twitterRecentSearchRequest` for the far side of the relationship.
  """
  updateByNodeId: TwitterRecentSearchCacheOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyNodeIdUpdate

  """
  A `TwitterRecentSearchRequestInput` object that will be created and connected to this object.
  """
  create: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyTwitterRecentSearchRequestsCreateInput
}

"""
The fields on `twitterRecentSearchRequest` to look up the row to connect.
"""
input TwitterRecentSearchRequestTwitterRecentSearchRequestsPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input TwitterRecentSearchRequestNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchRequest` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `twitterRecentSearchRequest` to look up the row to delete.
"""
input TwitterRecentSearchRequestTwitterRecentSearchRequestsPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input TwitterRecentSearchRequestNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchRequest` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `twitterRecentSearchRequest` to look up the row to update.
"""
input TwitterRecentSearchRequestOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyUsingTwitterRecentSearchRequestsPkeyUpdate {
  """
  An object where the defined keys will be set on the `twitterRecentSearchRequest` being updated.
  """
  patch: updateTwitterRecentSearchRequestOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `twitterRecentSearchRequest` being updated.
"""
input updateTwitterRecentSearchRequestOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyPatch {
  id: Int
  keyword: String
  sources: String
  createdAt: Datetime
  twitterRecentSearchCaches: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInverseInput
}

"""
Input for the nested mutation of `twitterRecentSearchCache` in the `TwitterRecentSearchRequestInput` mutation.
"""
input TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInverseInput {
  """
  Flag indicating whether all other `twitterRecentSearchCache` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  connectById: [TwitterRecentSearchCacheTwitterRecentSearchCachePkeyConnect!]

  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  connectByNodeId: [TwitterRecentSearchCacheNodeIdConnect!]

  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  deleteById: [TwitterRecentSearchCacheTwitterRecentSearchCachePkeyDelete!]

  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  deleteByNodeId: [TwitterRecentSearchCacheNodeIdDelete!]

  """
  The primary key(s) and patch data for `twitterRecentSearchCache` for the far side of the relationship.
  """
  updateById: [TwitterRecentSearchCacheOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyUsingTwitterRecentSearchCachePkeyUpdate!]

  """
  The primary key(s) and patch data for `twitterRecentSearchCache` for the far side of the relationship.
  """
  updateByNodeId: [TwitterRecentSearchRequestOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyNodeIdUpdate!]

  """
  A `TwitterRecentSearchCacheInput` object that will be created and connected to this object.
  """
  create: [TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyTwitterRecentSearchCacheCreateInput!]
}

"""
The fields on `twitterRecentSearchCache` to look up the row to connect.
"""
input TwitterRecentSearchCacheTwitterRecentSearchCachePkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input TwitterRecentSearchCacheNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchCache` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `twitterRecentSearchCache` to look up the row to delete.
"""
input TwitterRecentSearchCacheTwitterRecentSearchCachePkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input TwitterRecentSearchCacheNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchCache` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `twitterRecentSearchCache` to look up the row to update.
"""
input TwitterRecentSearchCacheOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyUsingTwitterRecentSearchCachePkeyUpdate {
  """
  An object where the defined keys will be set on the `twitterRecentSearchCache` being updated.
  """
  patch: updateTwitterRecentSearchCacheOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `twitterRecentSearchCache` being updated.
"""
input updateTwitterRecentSearchCacheOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyPatch {
  id: Int
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  twitterRecentSearchRequest: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInput
  twitterRecentSearchCachePhotos: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInverseInput
}

"""
Input for the nested mutation of `twitterRecentSearchCachePhoto` in the `TwitterRecentSearchCacheInput` mutation.
"""
input TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInverseInput {
  """
  Flag indicating whether all other `twitterRecentSearchCachePhoto` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `twitterRecentSearchCachePhoto` for the far side of the relationship.
  """
  connectById: [TwitterRecentSearchCachePhotoTwitterRecentSearchCachePhotosPkeyConnect!]

  """
  The primary key(s) for `twitterRecentSearchCachePhoto` for the far side of the relationship.
  """
  connectByNodeId: [TwitterRecentSearchCachePhotoNodeIdConnect!]

  """
  The primary key(s) for `twitterRecentSearchCachePhoto` for the far side of the relationship.
  """
  deleteById: [TwitterRecentSearchCachePhotoTwitterRecentSearchCachePhotosPkeyDelete!]

  """
  The primary key(s) for `twitterRecentSearchCachePhoto` for the far side of the relationship.
  """
  deleteByNodeId: [TwitterRecentSearchCachePhotoNodeIdDelete!]

  """
  The primary key(s) and patch data for `twitterRecentSearchCachePhoto` for the far side of the relationship.
  """
  updateById: [TwitterRecentSearchCachePhotoOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyUsingTwitterRecentSearchCachePhotosPkeyUpdate!]

  """
  The primary key(s) and patch data for `twitterRecentSearchCachePhoto` for the far side of the relationship.
  """
  updateByNodeId: [TwitterRecentSearchCacheOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyNodeIdUpdate!]

  """
  A `TwitterRecentSearchCachePhotoInput` object that will be created and connected to this object.
  """
  create: [TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyTwitterRecentSearchCachePhotosCreateInput!]
}

"""
The fields on `twitterRecentSearchCachePhoto` to look up the row to connect.
"""
input TwitterRecentSearchCachePhotoTwitterRecentSearchCachePhotosPkeyConnect {
  id: Int!
}

"""
The globally unique `ID` look up for the row to connect.
"""
input TwitterRecentSearchCachePhotoNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchCachePhoto` to be connected.
  """
  nodeId: ID!
}

"""
The fields on `twitterRecentSearchCachePhoto` to look up the row to delete.
"""
input TwitterRecentSearchCachePhotoTwitterRecentSearchCachePhotosPkeyDelete {
  id: Int!
}

"""
The globally unique `ID` look up for the row to delete.
"""
input TwitterRecentSearchCachePhotoNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchCachePhoto` to be deleted.
  """
  nodeId: ID!
}

"""
The fields on `twitterRecentSearchCachePhoto` to look up the row to update.
"""
input TwitterRecentSearchCachePhotoOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyUsingTwitterRecentSearchCachePhotosPkeyUpdate {
  """
  An object where the defined keys will be set on the `twitterRecentSearchCachePhoto` being updated.
  """
  patch: updateTwitterRecentSearchCachePhotoOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `twitterRecentSearchCachePhoto` being updated.
"""
input updateTwitterRecentSearchCachePhotoOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyPatch {
  id: Int
  mediaKey: String
  type: String
  url: String
  twitterRecentSearchCache: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInput
}

"""
Input for the nested mutation of `twitterRecentSearchCache` in the `TwitterRecentSearchCachePhotoInput` mutation.
"""
input TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInput {
  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  connectById: TwitterRecentSearchCacheTwitterRecentSearchCachePkeyConnect

  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  connectByNodeId: TwitterRecentSearchCacheNodeIdConnect

  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  deleteById: TwitterRecentSearchCacheTwitterRecentSearchCachePkeyDelete

  """
  The primary key(s) for `twitterRecentSearchCache` for the far side of the relationship.
  """
  deleteByNodeId: TwitterRecentSearchCacheNodeIdDelete

  """
  The primary key(s) and patch data for `twitterRecentSearchCache` for the far side of the relationship.
  """
  updateById: TwitterRecentSearchCacheOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyUsingTwitterRecentSearchCachePkeyUpdate

  """
  The primary key(s) and patch data for `twitterRecentSearchCache` for the far side of the relationship.
  """
  updateByNodeId: TwitterRecentSearchCachePhotoOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyNodeIdUpdate

  """
  A `TwitterRecentSearchCacheInput` object that will be created and connected to this object.
  """
  create: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyTwitterRecentSearchCacheCreateInput
}

"""
The fields on `twitterRecentSearchCache` to look up the row to update.
"""
input TwitterRecentSearchCacheOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyUsingTwitterRecentSearchCachePkeyUpdate {
  """
  An object where the defined keys will be set on the `twitterRecentSearchCache` being updated.
  """
  patch: updateTwitterRecentSearchCacheOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `twitterRecentSearchCache` being updated.
"""
input updateTwitterRecentSearchCacheOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyPatch {
  id: Int
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  twitterRecentSearchRequestId: Int
  suggestedKeywords: [String]
  twitterRecentSearchRequest: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInput
  twitterRecentSearchCachePhotos: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInverseInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input TwitterRecentSearchCachePhotoOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchCache` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `twitterRecentSearchCache` being updated.
  """
  patch: TwitterRecentSearchCachePatch!
}

"""
Represents an update to a `TwitterRecentSearchCache`. Fields that are set will be updated.
"""
input TwitterRecentSearchCachePatch {
  id: Int
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  twitterRecentSearchRequestId: Int
  suggestedKeywords: [String]
  twitterRecentSearchRequest: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInput
  twitterRecentSearchCachePhotos: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInverseInput
}

"""
The `twitterRecentSearchCache` to be created by this mutation.
"""
input TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyTwitterRecentSearchCacheCreateInput {
  id: Int
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  twitterRecentSearchRequestId: Int
  suggestedKeywords: [String]
  twitterRecentSearchRequest: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInput
  twitterRecentSearchCachePhotos: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInverseInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input TwitterRecentSearchCacheOnTwitterRecentSearchCachePhotoForTwitterRecentSearchCachePTwitterRecentSearchCacheFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchCachePhoto` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `twitterRecentSearchCachePhoto` being updated.
  """
  patch: TwitterRecentSearchCachePhotoPatch!
}

"""
Represents an update to a `TwitterRecentSearchCachePhoto`. Fields that are set will be updated.
"""
input TwitterRecentSearchCachePhotoPatch {
  id: Int
  mediaKey: String
  type: String
  url: String
  twitterRecentSearchCacheId: Int
  twitterRecentSearchCache: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInput
}

"""
The `twitterRecentSearchCachePhoto` to be created by this mutation.
"""
input TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyTwitterRecentSearchCachePhotosCreateInput {
  id: Int
  mediaKey: String
  type: String
  url: String
  twitterRecentSearchCache: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input TwitterRecentSearchRequestOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchCache` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `twitterRecentSearchCache` being updated.
  """
  patch: TwitterRecentSearchCachePatch!
}

"""
The `twitterRecentSearchCache` to be created by this mutation.
"""
input TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyTwitterRecentSearchCacheCreateInput {
  id: Int
  tweetId: String
  authorId: String
  publishedAt: String
  text: String
  name: String
  profileImageUrl: String
  username: String
  verified: Boolean
  suggestedKeywords: [String]
  twitterRecentSearchRequest: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInput
  twitterRecentSearchCachePhotos: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInverseInput
}

"""
The globally unique `ID` look up for the row to update.
"""
input TwitterRecentSearchCacheOnTwitterRecentSearchCacheForTwitterRecentSearchCacheTwitterRecentSearchRequestFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `twitterRecentSearchRequest` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `twitterRecentSearchRequest` being updated.
  """
  patch: TwitterRecentSearchRequestPatch!
}

"""
Represents an update to a `TwitterRecentSearchRequest`. Fields that are set will be updated.
"""
input TwitterRecentSearchRequestPatch {
  id: Int
  keyword: String
  sources: String
  createdAt: Datetime
  twitterRecentSearchCaches: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInverseInput
}

"""
The `twitterRecentSearchRequest` to be created by this mutation.
"""
input TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyTwitterRecentSearchRequestsCreateInput {
  id: Int
  keyword: String
  sources: String
  createdAt: Datetime
  twitterRecentSearchCaches: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInverseInput
}

"""
The output of our create `TwitterRecentSearchCachePhoto` mutation.
"""
type CreateTwitterRecentSearchCachePhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCachePhoto` that was created by this mutation.
  """
  twitterRecentSearchCachePhoto: TwitterRecentSearchCachePhoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TwitterRecentSearchCache` that is related to this `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCache: TwitterRecentSearchCache

  """
  An edge for our `TwitterRecentSearchCachePhoto`. May be used by Relay 1.
  """
  twitterRecentSearchCachePhotoEdge(
    """
    The method to use when ordering `TwitterRecentSearchCachePhoto`.
    """
    orderBy: [TwitterRecentSearchCachePhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchCachePhotosEdge
}

"""
All input for the create `TwitterRecentSearchCachePhoto` mutation.
"""
input CreateTwitterRecentSearchCachePhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCachePhoto` to be created by this mutation.
  """
  twitterRecentSearchCachePhoto: TwitterRecentSearchCachePhotoInput!
}

"""
An input for mutations affecting `TwitterRecentSearchCachePhoto`
"""
input TwitterRecentSearchCachePhotoInput {
  id: Int
  mediaKey: String
  type: String
  url: String
  twitterRecentSearchCacheId: Int
  twitterRecentSearchCache: TwitterRecentSearchCachePTwitterRecentSearchCacheFkeyInput
}

"""
The output of our create `TwitterRecentSearchRequest` mutation.
"""
type CreateTwitterRecentSearchRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchRequest` that was created by this mutation.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterRecentSearchRequest`. May be used by Relay 1.
  """
  twitterRecentSearchRequestEdge(
    """
    The method to use when ordering `TwitterRecentSearchRequest`.
    """
    orderBy: [TwitterRecentSearchRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchRequestsEdge
}

"""
All input for the create `TwitterRecentSearchRequest` mutation.
"""
input CreateTwitterRecentSearchRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchRequest` to be created by this mutation.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequestInput!
}

"""
An input for mutations affecting `TwitterRecentSearchRequest`
"""
input TwitterRecentSearchRequestInput {
  id: Int
  keyword: String
  sources: String
  createdAt: Datetime
  twitterRecentSearchCaches: TwitterRecentSearchCacheTwitterRecentSearchRequestFkeyInverseInput
}

"""
The output of our create `TwitterSource` mutation.
"""
type CreateTwitterSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterSource` that was created by this mutation.
  """
  twitterSource: TwitterSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterSource`. May be used by Relay 1.
  """
  twitterSourceEdge(
    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterSourcesEdge
}

"""
All input for the create `TwitterSource` mutation.
"""
input CreateTwitterSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `TwitterSource` to be created by this mutation.
  """
  twitterSource: TwitterSourceInput!
}

"""
An input for mutations affecting `TwitterSource`
"""
input TwitterSourceInput {
  accountId: Int
  accountName: String!
  accountUsername: String!
}

"""
The output of our create `User` mutation.
"""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was created by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the create `User` mutation.
"""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `User` to be created by this mutation.
  """
  user: UserInput!
}

"""
An input for mutations affecting `User`
"""
input UserInput {
  id: Int
  username: String!
  hashedPassword: String!
  newsFeeds: NewsFeedsUserIdFkeyInverseInput
  twitterFeeds: TwitterFeedsUserIdFkeyInverseInput
  collections: CollectionsUserIdFkeyInverseInput
}

"""
The output of our update `CollectionArticle` mutation.
"""
type UpdateCollectionArticlePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionArticle` that was updated by this mutation.
  """
  collectionArticle: CollectionArticle

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionArticle`.
  """
  collection: Collection

  """
  An edge for our `CollectionArticle`. May be used by Relay 1.
  """
  collectionArticleEdge(
    """
    The method to use when ordering `CollectionArticle`.
    """
    orderBy: [CollectionArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionArticlesEdge
}

"""
All input for the `updateCollectionArticleByNodeId` mutation.
"""
input UpdateCollectionArticleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionArticle` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionArticle` being updated.
  """
  patch: CollectionArticlePatch!
}

"""
All input for the `updateCollectionArticle` mutation.
"""
input UpdateCollectionArticleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionArticle` being updated.
  """
  patch: CollectionArticlePatch!
  id: Int!
}

"""
The output of our update `CollectionGoogleFactCheck` mutation.
"""
type UpdateCollectionGoogleFactCheckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionGoogleFactCheck` that was updated by this mutation.
  """
  collectionGoogleFactCheck: CollectionGoogleFactCheck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionGoogleFactCheck`.
  """
  collection: Collection

  """
  An edge for our `CollectionGoogleFactCheck`. May be used by Relay 1.
  """
  collectionGoogleFactCheckEdge(
    """
    The method to use when ordering `CollectionGoogleFactCheck`.
    """
    orderBy: [CollectionGoogleFactChecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionGoogleFactChecksEdge
}

"""
All input for the `updateCollectionGoogleFactCheckByNodeId` mutation.
"""
input UpdateCollectionGoogleFactCheckByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionGoogleFactCheck` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionGoogleFactCheck` being updated.
  """
  patch: CollectionGoogleFactCheckPatch!
}

"""
All input for the `updateCollectionGoogleFactCheck` mutation.
"""
input UpdateCollectionGoogleFactCheckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionGoogleFactCheck` being updated.
  """
  patch: CollectionGoogleFactCheckPatch!
  id: Int!
}

"""
The output of our update `CollectionTweetPhoto` mutation.
"""
type UpdateCollectionTweetPhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweetPhoto` that was updated by this mutation.
  """
  collectionTweetPhoto: CollectionTweetPhoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CollectionTweet` that is related to this `CollectionTweetPhoto`.
  """
  collectionTweet: CollectionTweet

  """
  An edge for our `CollectionTweetPhoto`. May be used by Relay 1.
  """
  collectionTweetPhotoEdge(
    """
    The method to use when ordering `CollectionTweetPhoto`.
    """
    orderBy: [CollectionTweetPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetPhotosEdge
}

"""
All input for the `updateCollectionTweetPhotoByNodeId` mutation.
"""
input UpdateCollectionTweetPhotoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionTweetPhoto` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionTweetPhoto` being updated.
  """
  patch: CollectionTweetPhotoPatch!
}

"""
All input for the `updateCollectionTweetPhoto` mutation.
"""
input UpdateCollectionTweetPhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionTweetPhoto` being updated.
  """
  patch: CollectionTweetPhotoPatch!
  id: Int!
}

"""
The output of our update `CollectionTweet` mutation.
"""
type UpdateCollectionTweetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweet` that was updated by this mutation.
  """
  collectionTweet: CollectionTweet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection

  """
  An edge for our `CollectionTweet`. May be used by Relay 1.
  """
  collectionTweetEdge(
    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetsEdge
}

"""
All input for the `updateCollectionTweetByNodeId` mutation.
"""
input UpdateCollectionTweetByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionTweet` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionTweet` being updated.
  """
  patch: CollectionTweetPatch!
}

"""
All input for the `updateCollectionTweet` mutation.
"""
input UpdateCollectionTweetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionTweet` being updated.
  """
  patch: CollectionTweetPatch!
  id: Int!
}

"""
The output of our update `CollectionVeraFile` mutation.
"""
type UpdateCollectionVeraFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionVeraFile` that was updated by this mutation.
  """
  collectionVeraFile: CollectionVeraFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionVeraFile`.
  """
  collection: Collection

  """
  An edge for our `CollectionVeraFile`. May be used by Relay 1.
  """
  collectionVeraFileEdge(
    """
    The method to use when ordering `CollectionVeraFile`.
    """
    orderBy: [CollectionVeraFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionVeraFilesEdge
}

"""
All input for the `updateCollectionVeraFileByNodeId` mutation.
"""
input UpdateCollectionVeraFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionVeraFile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionVeraFile` being updated.
  """
  patch: CollectionVeraFilePatch!
}

"""
All input for the `updateCollectionVeraFile` mutation.
"""
input UpdateCollectionVeraFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionVeraFile` being updated.
  """
  patch: CollectionVeraFilePatch!
  id: Int!
}

"""
The output of our update `Collection` mutation.
"""
type UpdateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Collection` that was updated by this mutation.
  """
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  An edge for our `Collection`. May be used by Relay 1.
  """
  collectionEdge(
    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `updateCollectionByNodeId` mutation.
"""
input UpdateCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
}

"""
All input for the `updateCollection` mutation.
"""
input UpdateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  id: Int!
}

"""
All input for the `updateCollectionByTitleAndUserId` mutation.
"""
input UpdateCollectionByTitleAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  title: String!
  userId: Int!
}

"""
The output of our update `NewsFeed` mutation.
"""
type UpdateNewsFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `NewsFeed` that was updated by this mutation.
  """
  newsFeed: NewsFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User

  """
  An edge for our `NewsFeed`. May be used by Relay 1.
  """
  newsFeedEdge(
    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsFeedsEdge
}

"""
All input for the `updateNewsFeedByNodeId` mutation.
"""
input UpdateNewsFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NewsFeed` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NewsFeed` being updated.
  """
  patch: NewsFeedPatch!
}

"""
All input for the `updateNewsFeed` mutation.
"""
input UpdateNewsFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NewsFeed` being updated.
  """
  patch: NewsFeedPatch!
  id: Int!
}

"""
All input for the `updateNewsFeedByTitleAndUserId` mutation.
"""
input UpdateNewsFeedByTitleAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NewsFeed` being updated.
  """
  patch: NewsFeedPatch!
  title: String!
  userId: Int!
}

"""
The output of our update `TopHeadlinesCache` mutation.
"""
type UpdateTopHeadlinesCachePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TopHeadlinesCache` that was updated by this mutation.
  """
  topHeadlinesCache: TopHeadlinesCache

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TopHeadlinesRequest` that is related to this `TopHeadlinesCache`.
  """
  topHeadlinesRequest: TopHeadlinesRequest

  """
  An edge for our `TopHeadlinesCache`. May be used by Relay 1.
  """
  topHeadlinesCacheEdge(
    """
    The method to use when ordering `TopHeadlinesCache`.
    """
    orderBy: [TopHeadlinesCachesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopHeadlinesCachesEdge
}

"""
All input for the `updateTopHeadlinesCacheByNodeId` mutation.
"""
input UpdateTopHeadlinesCacheByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TopHeadlinesCache` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TopHeadlinesCache` being updated.
  """
  patch: TopHeadlinesCachePatch!
}

"""
All input for the `updateTopHeadlinesCache` mutation.
"""
input UpdateTopHeadlinesCacheInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TopHeadlinesCache` being updated.
  """
  patch: TopHeadlinesCachePatch!
  id: Int!
}

"""
The output of our update `TopHeadlinesRequest` mutation.
"""
type UpdateTopHeadlinesRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TopHeadlinesRequest` that was updated by this mutation.
  """
  topHeadlinesRequest: TopHeadlinesRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TopHeadlinesRequest`. May be used by Relay 1.
  """
  topHeadlinesRequestEdge(
    """
    The method to use when ordering `TopHeadlinesRequest`.
    """
    orderBy: [TopHeadlinesRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopHeadlinesRequestsEdge
}

"""
All input for the `updateTopHeadlinesRequestByNodeId` mutation.
"""
input UpdateTopHeadlinesRequestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TopHeadlinesRequest` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TopHeadlinesRequest` being updated.
  """
  patch: TopHeadlinesRequestPatch!
}

"""
All input for the `updateTopHeadlinesRequest` mutation.
"""
input UpdateTopHeadlinesRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TopHeadlinesRequest` being updated.
  """
  patch: TopHeadlinesRequestPatch!
  id: Int!
}

"""
The output of our update `TwitterFeed` mutation.
"""
type UpdateTwitterFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterFeed` that was updated by this mutation.
  """
  twitterFeed: TwitterFeed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User

  """
  An edge for our `TwitterFeed`. May be used by Relay 1.
  """
  twitterFeedEdge(
    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterFeedsEdge
}

"""
All input for the `updateTwitterFeedByNodeId` mutation.
"""
input UpdateTwitterFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterFeed` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterFeed` being updated.
  """
  patch: TwitterFeedPatch!
}

"""
All input for the `updateTwitterFeed` mutation.
"""
input UpdateTwitterFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterFeed` being updated.
  """
  patch: TwitterFeedPatch!
  id: Int!
}

"""
All input for the `updateTwitterFeedByTitleAndUserId` mutation.
"""
input UpdateTwitterFeedByTitleAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterFeed` being updated.
  """
  patch: TwitterFeedPatch!
  title: String!
  userId: Int!
}

"""
The output of our update `TwitterLocalSource` mutation.
"""
type UpdateTwitterLocalSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` that was updated by this mutation.
  """
  twitterLocalSource: TwitterLocalSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterLocalSource`. May be used by Relay 1.
  """
  twitterLocalSourceEdge(
    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterLocalSourcesEdge
}

"""
All input for the `updateTwitterLocalSourceByNodeId` mutation.
"""
input UpdateTwitterLocalSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterLocalSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
}

"""
Represents an update to a `TwitterLocalSource`. Fields that are set will be updated.
"""
input TwitterLocalSourcePatch {
  accountId: Int
  accountName: String
  accountUsername: String
}

"""
All input for the `updateTwitterLocalSource` mutation.
"""
input UpdateTwitterLocalSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
  accountId: Int!
}

"""
All input for the `updateTwitterLocalSourceByAccountName` mutation.
"""
input UpdateTwitterLocalSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
  accountName: String!
}

"""
All input for the `updateTwitterLocalSourceByAccountUsername` mutation.
"""
input UpdateTwitterLocalSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterLocalSource` being updated.
  """
  patch: TwitterLocalSourcePatch!
  accountUsername: String!
}

"""
The output of our update `TwitterRecentSearchCache` mutation.
"""
type UpdateTwitterRecentSearchCachePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCache` that was updated by this mutation.
  """
  twitterRecentSearchCache: TwitterRecentSearchCache

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TwitterRecentSearchRequest` that is related to this `TwitterRecentSearchCache`.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequest

  """
  An edge for our `TwitterRecentSearchCache`. May be used by Relay 1.
  """
  twitterRecentSearchCacheEdge(
    """
    The method to use when ordering `TwitterRecentSearchCache`.
    """
    orderBy: [TwitterRecentSearchCachesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchCachesEdge
}

"""
All input for the `updateTwitterRecentSearchCacheByNodeId` mutation.
"""
input UpdateTwitterRecentSearchCacheByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterRecentSearchCache` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterRecentSearchCache` being updated.
  """
  patch: TwitterRecentSearchCachePatch!
}

"""
All input for the `updateTwitterRecentSearchCache` mutation.
"""
input UpdateTwitterRecentSearchCacheInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterRecentSearchCache` being updated.
  """
  patch: TwitterRecentSearchCachePatch!
  id: Int!
}

"""
The output of our update `TwitterRecentSearchCachePhoto` mutation.
"""
type UpdateTwitterRecentSearchCachePhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCachePhoto` that was updated by this mutation.
  """
  twitterRecentSearchCachePhoto: TwitterRecentSearchCachePhoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TwitterRecentSearchCache` that is related to this `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCache: TwitterRecentSearchCache

  """
  An edge for our `TwitterRecentSearchCachePhoto`. May be used by Relay 1.
  """
  twitterRecentSearchCachePhotoEdge(
    """
    The method to use when ordering `TwitterRecentSearchCachePhoto`.
    """
    orderBy: [TwitterRecentSearchCachePhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchCachePhotosEdge
}

"""
All input for the `updateTwitterRecentSearchCachePhotoByNodeId` mutation.
"""
input UpdateTwitterRecentSearchCachePhotoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterRecentSearchCachePhoto` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterRecentSearchCachePhoto` being updated.
  """
  patch: TwitterRecentSearchCachePhotoPatch!
}

"""
All input for the `updateTwitterRecentSearchCachePhoto` mutation.
"""
input UpdateTwitterRecentSearchCachePhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterRecentSearchCachePhoto` being updated.
  """
  patch: TwitterRecentSearchCachePhotoPatch!
  id: Int!
}

"""
The output of our update `TwitterRecentSearchRequest` mutation.
"""
type UpdateTwitterRecentSearchRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchRequest` that was updated by this mutation.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterRecentSearchRequest`. May be used by Relay 1.
  """
  twitterRecentSearchRequestEdge(
    """
    The method to use when ordering `TwitterRecentSearchRequest`.
    """
    orderBy: [TwitterRecentSearchRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchRequestsEdge
}

"""
All input for the `updateTwitterRecentSearchRequestByNodeId` mutation.
"""
input UpdateTwitterRecentSearchRequestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterRecentSearchRequest` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterRecentSearchRequest` being updated.
  """
  patch: TwitterRecentSearchRequestPatch!
}

"""
All input for the `updateTwitterRecentSearchRequest` mutation.
"""
input UpdateTwitterRecentSearchRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterRecentSearchRequest` being updated.
  """
  patch: TwitterRecentSearchRequestPatch!
  id: Int!
}

"""
The output of our update `TwitterSource` mutation.
"""
type UpdateTwitterSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterSource` that was updated by this mutation.
  """
  twitterSource: TwitterSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterSource`. May be used by Relay 1.
  """
  twitterSourceEdge(
    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterSourcesEdge
}

"""
All input for the `updateTwitterSourceByNodeId` mutation.
"""
input UpdateTwitterSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
}

"""
Represents an update to a `TwitterSource`. Fields that are set will be updated.
"""
input TwitterSourcePatch {
  accountId: Int
  accountName: String
  accountUsername: String
}

"""
All input for the `updateTwitterSource` mutation.
"""
input UpdateTwitterSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
  accountId: Int!
}

"""
All input for the `updateTwitterSourceByAccountName` mutation.
"""
input UpdateTwitterSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
  accountName: String!
}

"""
All input for the `updateTwitterSourceByAccountUsername` mutation.
"""
input UpdateTwitterSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TwitterSource` being updated.
  """
  patch: TwitterSourcePatch!
  accountUsername: String!
}

"""
The output of our update `User` mutation.
"""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was updated by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the `updateUserByNodeId` mutation.
"""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""
All input for the `updateUser` mutation.
"""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: Int!
}

"""
All input for the `updateUserByUsername` mutation.
"""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""
The output of our delete `CollectionArticle` mutation.
"""
type DeleteCollectionArticlePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionArticle` that was deleted by this mutation.
  """
  collectionArticle: CollectionArticle
  deletedCollectionArticleNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionArticle`.
  """
  collection: Collection

  """
  An edge for our `CollectionArticle`. May be used by Relay 1.
  """
  collectionArticleEdge(
    """
    The method to use when ordering `CollectionArticle`.
    """
    orderBy: [CollectionArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionArticlesEdge
}

"""
All input for the `deleteCollectionArticleByNodeId` mutation.
"""
input DeleteCollectionArticleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionArticle` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionArticle` mutation.
"""
input DeleteCollectionArticleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `CollectionGoogleFactCheck` mutation.
"""
type DeleteCollectionGoogleFactCheckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionGoogleFactCheck` that was deleted by this mutation.
  """
  collectionGoogleFactCheck: CollectionGoogleFactCheck
  deletedCollectionGoogleFactCheckNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionGoogleFactCheck`.
  """
  collection: Collection

  """
  An edge for our `CollectionGoogleFactCheck`. May be used by Relay 1.
  """
  collectionGoogleFactCheckEdge(
    """
    The method to use when ordering `CollectionGoogleFactCheck`.
    """
    orderBy: [CollectionGoogleFactChecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionGoogleFactChecksEdge
}

"""
All input for the `deleteCollectionGoogleFactCheckByNodeId` mutation.
"""
input DeleteCollectionGoogleFactCheckByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionGoogleFactCheck` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionGoogleFactCheck` mutation.
"""
input DeleteCollectionGoogleFactCheckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `CollectionTweetPhoto` mutation.
"""
type DeleteCollectionTweetPhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweetPhoto` that was deleted by this mutation.
  """
  collectionTweetPhoto: CollectionTweetPhoto
  deletedCollectionTweetPhotoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CollectionTweet` that is related to this `CollectionTweetPhoto`.
  """
  collectionTweet: CollectionTweet

  """
  An edge for our `CollectionTweetPhoto`. May be used by Relay 1.
  """
  collectionTweetPhotoEdge(
    """
    The method to use when ordering `CollectionTweetPhoto`.
    """
    orderBy: [CollectionTweetPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetPhotosEdge
}

"""
All input for the `deleteCollectionTweetPhotoByNodeId` mutation.
"""
input DeleteCollectionTweetPhotoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionTweetPhoto` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionTweetPhoto` mutation.
"""
input DeleteCollectionTweetPhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `CollectionTweet` mutation.
"""
type DeleteCollectionTweetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionTweet` that was deleted by this mutation.
  """
  collectionTweet: CollectionTweet
  deletedCollectionTweetNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionTweet`.
  """
  collection: Collection

  """
  An edge for our `CollectionTweet`. May be used by Relay 1.
  """
  collectionTweetEdge(
    """
    The method to use when ordering `CollectionTweet`.
    """
    orderBy: [CollectionTweetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionTweetsEdge
}

"""
All input for the `deleteCollectionTweetByNodeId` mutation.
"""
input DeleteCollectionTweetByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionTweet` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionTweet` mutation.
"""
input DeleteCollectionTweetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `CollectionVeraFile` mutation.
"""
type DeleteCollectionVeraFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CollectionVeraFile` that was deleted by this mutation.
  """
  collectionVeraFile: CollectionVeraFile
  deletedCollectionVeraFileNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionVeraFile`.
  """
  collection: Collection

  """
  An edge for our `CollectionVeraFile`. May be used by Relay 1.
  """
  collectionVeraFileEdge(
    """
    The method to use when ordering `CollectionVeraFile`.
    """
    orderBy: [CollectionVeraFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionVeraFilesEdge
}

"""
All input for the `deleteCollectionVeraFileByNodeId` mutation.
"""
input DeleteCollectionVeraFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionVeraFile` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionVeraFile` mutation.
"""
input DeleteCollectionVeraFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Collection` mutation.
"""
type DeleteCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Collection` that was deleted by this mutation.
  """
  collection: Collection
  deletedCollectionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `Collection`.
  """
  user: User

  """
  An edge for our `Collection`. May be used by Relay 1.
  """
  collectionEdge(
    """
    The method to use when ordering `Collection`.
    """
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `deleteCollectionByNodeId` mutation.
"""
input DeleteCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollection` mutation.
"""
input DeleteCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteCollectionByTitleAndUserId` mutation.
"""
input DeleteCollectionByTitleAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  title: String!
  userId: Int!
}

"""
The output of our delete `NewsFeed` mutation.
"""
type DeleteNewsFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `NewsFeed` that was deleted by this mutation.
  """
  newsFeed: NewsFeed
  deletedNewsFeedNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `NewsFeed`.
  """
  user: User

  """
  An edge for our `NewsFeed`. May be used by Relay 1.
  """
  newsFeedEdge(
    """
    The method to use when ordering `NewsFeed`.
    """
    orderBy: [NewsFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NewsFeedsEdge
}

"""
All input for the `deleteNewsFeedByNodeId` mutation.
"""
input DeleteNewsFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NewsFeed` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteNewsFeed` mutation.
"""
input DeleteNewsFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteNewsFeedByTitleAndUserId` mutation.
"""
input DeleteNewsFeedByTitleAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  title: String!
  userId: Int!
}

"""
The output of our delete `TopHeadlinesCache` mutation.
"""
type DeleteTopHeadlinesCachePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TopHeadlinesCache` that was deleted by this mutation.
  """
  topHeadlinesCache: TopHeadlinesCache
  deletedTopHeadlinesCacheNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TopHeadlinesRequest` that is related to this `TopHeadlinesCache`.
  """
  topHeadlinesRequest: TopHeadlinesRequest

  """
  An edge for our `TopHeadlinesCache`. May be used by Relay 1.
  """
  topHeadlinesCacheEdge(
    """
    The method to use when ordering `TopHeadlinesCache`.
    """
    orderBy: [TopHeadlinesCachesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopHeadlinesCachesEdge
}

"""
All input for the `deleteTopHeadlinesCacheByNodeId` mutation.
"""
input DeleteTopHeadlinesCacheByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TopHeadlinesCache` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTopHeadlinesCache` mutation.
"""
input DeleteTopHeadlinesCacheInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `TopHeadlinesRequest` mutation.
"""
type DeleteTopHeadlinesRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TopHeadlinesRequest` that was deleted by this mutation.
  """
  topHeadlinesRequest: TopHeadlinesRequest
  deletedTopHeadlinesRequestNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TopHeadlinesRequest`. May be used by Relay 1.
  """
  topHeadlinesRequestEdge(
    """
    The method to use when ordering `TopHeadlinesRequest`.
    """
    orderBy: [TopHeadlinesRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopHeadlinesRequestsEdge
}

"""
All input for the `deleteTopHeadlinesRequestByNodeId` mutation.
"""
input DeleteTopHeadlinesRequestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TopHeadlinesRequest` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTopHeadlinesRequest` mutation.
"""
input DeleteTopHeadlinesRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `TwitterFeed` mutation.
"""
type DeleteTwitterFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterFeed` that was deleted by this mutation.
  """
  twitterFeed: TwitterFeed
  deletedTwitterFeedNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `TwitterFeed`.
  """
  user: User

  """
  An edge for our `TwitterFeed`. May be used by Relay 1.
  """
  twitterFeedEdge(
    """
    The method to use when ordering `TwitterFeed`.
    """
    orderBy: [TwitterFeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterFeedsEdge
}

"""
All input for the `deleteTwitterFeedByNodeId` mutation.
"""
input DeleteTwitterFeedByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterFeed` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterFeed` mutation.
"""
input DeleteTwitterFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteTwitterFeedByTitleAndUserId` mutation.
"""
input DeleteTwitterFeedByTitleAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  title: String!
  userId: Int!
}

"""
The output of our delete `TwitterLocalSource` mutation.
"""
type DeleteTwitterLocalSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterLocalSource` that was deleted by this mutation.
  """
  twitterLocalSource: TwitterLocalSource
  deletedTwitterLocalSourceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterLocalSource`. May be used by Relay 1.
  """
  twitterLocalSourceEdge(
    """
    The method to use when ordering `TwitterLocalSource`.
    """
    orderBy: [TwitterLocalSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterLocalSourcesEdge
}

"""
All input for the `deleteTwitterLocalSourceByNodeId` mutation.
"""
input DeleteTwitterLocalSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterLocalSource` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterLocalSource` mutation.
"""
input DeleteTwitterLocalSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: Int!
}

"""
All input for the `deleteTwitterLocalSourceByAccountName` mutation.
"""
input DeleteTwitterLocalSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountName: String!
}

"""
All input for the `deleteTwitterLocalSourceByAccountUsername` mutation.
"""
input DeleteTwitterLocalSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountUsername: String!
}

"""
The output of our delete `TwitterRecentSearchCache` mutation.
"""
type DeleteTwitterRecentSearchCachePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCache` that was deleted by this mutation.
  """
  twitterRecentSearchCache: TwitterRecentSearchCache
  deletedTwitterRecentSearchCacheNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TwitterRecentSearchRequest` that is related to this `TwitterRecentSearchCache`.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequest

  """
  An edge for our `TwitterRecentSearchCache`. May be used by Relay 1.
  """
  twitterRecentSearchCacheEdge(
    """
    The method to use when ordering `TwitterRecentSearchCache`.
    """
    orderBy: [TwitterRecentSearchCachesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchCachesEdge
}

"""
All input for the `deleteTwitterRecentSearchCacheByNodeId` mutation.
"""
input DeleteTwitterRecentSearchCacheByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterRecentSearchCache` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterRecentSearchCache` mutation.
"""
input DeleteTwitterRecentSearchCacheInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `TwitterRecentSearchCachePhoto` mutation.
"""
type DeleteTwitterRecentSearchCachePhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchCachePhoto` that was deleted by this mutation.
  """
  twitterRecentSearchCachePhoto: TwitterRecentSearchCachePhoto
  deletedTwitterRecentSearchCachePhotoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TwitterRecentSearchCache` that is related to this `TwitterRecentSearchCachePhoto`.
  """
  twitterRecentSearchCache: TwitterRecentSearchCache

  """
  An edge for our `TwitterRecentSearchCachePhoto`. May be used by Relay 1.
  """
  twitterRecentSearchCachePhotoEdge(
    """
    The method to use when ordering `TwitterRecentSearchCachePhoto`.
    """
    orderBy: [TwitterRecentSearchCachePhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchCachePhotosEdge
}

"""
All input for the `deleteTwitterRecentSearchCachePhotoByNodeId` mutation.
"""
input DeleteTwitterRecentSearchCachePhotoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterRecentSearchCachePhoto` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterRecentSearchCachePhoto` mutation.
"""
input DeleteTwitterRecentSearchCachePhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `TwitterRecentSearchRequest` mutation.
"""
type DeleteTwitterRecentSearchRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterRecentSearchRequest` that was deleted by this mutation.
  """
  twitterRecentSearchRequest: TwitterRecentSearchRequest
  deletedTwitterRecentSearchRequestNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterRecentSearchRequest`. May be used by Relay 1.
  """
  twitterRecentSearchRequestEdge(
    """
    The method to use when ordering `TwitterRecentSearchRequest`.
    """
    orderBy: [TwitterRecentSearchRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterRecentSearchRequestsEdge
}

"""
All input for the `deleteTwitterRecentSearchRequestByNodeId` mutation.
"""
input DeleteTwitterRecentSearchRequestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterRecentSearchRequest` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterRecentSearchRequest` mutation.
"""
input DeleteTwitterRecentSearchRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `TwitterSource` mutation.
"""
type DeleteTwitterSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `TwitterSource` that was deleted by this mutation.
  """
  twitterSource: TwitterSource
  deletedTwitterSourceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `TwitterSource`. May be used by Relay 1.
  """
  twitterSourceEdge(
    """
    The method to use when ordering `TwitterSource`.
    """
    orderBy: [TwitterSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TwitterSourcesEdge
}

"""
All input for the `deleteTwitterSourceByNodeId` mutation.
"""
input DeleteTwitterSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TwitterSource` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTwitterSource` mutation.
"""
input DeleteTwitterSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: Int!
}

"""
All input for the `deleteTwitterSourceByAccountName` mutation.
"""
input DeleteTwitterSourceByAccountNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountName: String!
}

"""
All input for the `deleteTwitterSourceByAccountUsername` mutation.
"""
input DeleteTwitterSourceByAccountUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountUsername: String!
}

"""
The output of our delete `User` mutation.
"""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was deleted by this mutation.
  """
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the `deleteUserByNodeId` mutation.
"""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUser` mutation.
"""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteUserByUsername` mutation.
"""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""
The output of our `signin` mutation.
"""
type SigninPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""
All input for the `signin` mutation.
"""
input SigninInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userName: String!
  password: String!
}

"""
The output of our `signup` mutation.
"""
type SignupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `signup` mutation.
"""
input SignupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userName: String
  password: String
}
