"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `Content`.
  """
  contentsConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Content`.
    """
    orderBy: [ContentsOrderBy!] = [NATURAL]
  ): ContentsConnection

  """
  Reads a set of `Content`.
  """
  contents(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `Content`.
    """
    orderBy: [ContentsOrderBy!]
  ): [Content!]

  """
  Reads and enables pagination through a set of `User`.
  """
  usersConnection(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [NATURAL]
  ): UsersConnection

  """
  Reads a set of `User`.
  """
  users(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Skip the first `n` values.
    """
    offset: Int

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!]
  ): [User!]
  searchTweets(query: String!): [Tweet!]!
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A connection to a list of `Content` values.
"""
type ContentsConnection {
  """
  A list of `Content` objects.
  """
  nodes: [Content]!

  """
  A list of edges which contains the `Content` and cursor to aid in pagination.
  """
  edges: [ContentsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Content` you could get from the connection.
  """
  totalCount: Int!
}

type Content {
  name: String!
}

"""
A `Content` edge in the connection.
"""
type ContentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Content` at the end of the edge.
  """
  node: Content
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
Methods to use when ordering `Content`.
"""
enum ContentsOrderBy {
  NATURAL
}

"""
A connection to a list of `User` values.
"""
type UsersConnection {
  """
  A list of `User` objects.
  """
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `User` you could get from the connection.
  """
  totalCount: Int!
}

type User {
  name: String!
}

"""
A `User` edge in the connection.
"""
type UsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `User` at the end of the edge.
  """
  node: User
}

"""
Methods to use when ordering `User`.
"""
enum UsersOrderBy {
  NATURAL
}

type Tweet {
  id: String
  text: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Content`.
  """
  createContent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContentInput!
  ): CreateContentPayload

  """
  Creates a single `User`.
  """
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload
}

"""
The output of our create `Content` mutation.
"""
type CreateContentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Content` that was created by this mutation.
  """
  content: Content

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Content`. May be used by Relay 1.
  """
  contentEdge(
    """
    The method to use when ordering `Content`.
    """
    orderBy: [ContentsOrderBy!] = [NATURAL]
  ): ContentsEdge
}

"""
All input for the create `Content` mutation.
"""
input CreateContentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Content` to be created by this mutation.
  """
  content: ContentInput!
}

"""
An input for mutations affecting `Content`
"""
input ContentInput {
  name: String!
}

"""
The output of our create `User` mutation.
"""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was created by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [NATURAL]
  ): UsersEdge
}

"""
All input for the create `User` mutation.
"""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `User` to be created by this mutation.
  """
  user: UserInput!
}

"""
An input for mutations affecting `User`
"""
input UserInput {
  name: String!
}
